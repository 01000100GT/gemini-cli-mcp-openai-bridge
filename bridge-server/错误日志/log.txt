2025-07-25T04:29:34.958Z [BRIDGE-SERVER] [INFO] OpenAI bridge request received {
  requestId: 'b10a6ab6-244c-429e-97db-f3dacc70fe2b',
  model: 'gemini-2.5-pro',
  stream: true
}
[GeminiApiClient] [客户端时序1] 开始初始化API Key轮换服务
[GeminiApiClient] [客户端时序2] 创建RotationService实例
[GeminiApiClient] [客户端时序3] 调用RotationService.initialize()
[rotation/RotationService] [时序1] 开始初始化轮换服务
[rotation/RotationService] [时序2] 检查多账号模式配置
[DEBUG] /rotation/ConfigLoader.ts - isMultiAccountEnabled: 检查多账号模式 {
  enabled: true,
  hasMultiAccounts: true,
  hasIndividualKeys: false,
  result: true
}
[rotation/RotationService] [时序3] 多账号模式检查结果: true
[rotation/RotationService] [时序5] 开始加载轮换配置
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 开始加载轮换配置
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 开始加载多账号配置
[DEBUG] /rotation/ConfigLoader.ts - isMultiAccountEnabled: 检查多账号模式 {
  enabled: true,
  hasMultiAccounts: true,
  hasIndividualKeys: false,
  result: true
}
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 检查GEMINI_MULTI_ACCOUNTS环境变量 { hasJson: true }
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 解析GEMINI_MULTI_ACCOUNTS JSON
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: JSON配置验证成功 { accountCount: 2 }
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 多账号配置加载完成 { hasMultiAccount: true, accountCount: 2 }
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 轮换配置构建完成 {
  strategy: 'round-robin',
  accountCount: 2,
  enableFallback: true,
  maxRequestsPerKey: undefined,
  rotationInterval: undefined
}
[rotation/RotationService] [时序6] 配置加载完成，账号数量: 2
[rotation/RotationService] [时序8] 开始初始化轮换管理器
[rotation/ApiKeyRotationManager] 开始初始化轮换管理器
[rotation/ApiKeyRotationManager] 加载持久化数据
[DEBUG] /rotation/PersistenceService.ts - loadData: 开始加载持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json'
}
[GeminiApiClient] [请求时序1] 收到sendMessageStream请求
[GeminiApiClient] [请求时序2] 检测到初始化正在进行，等待完成...
[DEBUG] /rotation/PersistenceService.ts - loadData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - loadData: 读取持久化文件内容
[DEBUG] /rotation/PersistenceService.ts - loadData: 持久化数据解析成功 { currentIndex: 0, totalRequests: 2, keysCount: 2 }
[DEBUG] /rotation/PersistenceService.ts - loadData: 释放文件锁
[rotation/ApiKeyRotationManager] 持久化数据加载结果: 成功
[rotation/ApiKeyRotationManager] 初始化API Keys
[rotation/ApiKeyRotationManager] 开始初始化API Keys
[rotation/ApiKeyRotationManager] 使用多账号配置，账号数量: 2
[rotation/ApiKeyRotationManager] 初始化第1个API Key: AIzaSyAN8B...
[rotation/ApiKeyRotationManager] 初始化第2个API Key: AIzaSyAGqu...
2025-07-25T04:29:34.963Z [BRIDGE-SERVER] [INFO] Initialized 2 API keys
[rotation/ApiKeyRotationManager] API Keys初始化完成，共2个Key
[rotation/ApiKeyRotationManager] 恢复之前保存的状态
2025-07-25T04:29:34.963Z [BRIDGE-SERVER] [INFO] Restored API key rotation state from persistence
[rotation/ApiKeyRotationManager] 验证API Keys
[rotation/ApiKeyRotationManager] 初始化完成后保存初始状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 2,
  keysCount: 2,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 2,
  keysCount: 2
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
2025-07-25T04:29:34.965Z [BRIDGE-SERVER] [INFO] API Key rotation initialized with 2 keys
[rotation/ApiKeyRotationManager] 轮换管理器初始化完成，共2个API Key
[rotation/RotationService] [时序9] 轮换管理器初始化完成，设置服务为启用状态
2025-07-25T04:29:34.965Z [BRIDGE-SERVER] [INFO] API Key rotation service initialized successfully
[rotation/RotationService] [时序10] API Key轮换服务初始化成功
[GeminiApiClient] [客户端时序4] API Key轮换服务初始化成功
[GeminiApiClient] [客户端时序5] 初始化流程完成
[GeminiApiClient] [回退时序1] 开始初始化回退管理器
[DEBUG] /rotation/ConfigLoader.ts - loadFallbackConfig: 开始加载回退模型配置
[DEBUG] /rotation/ConfigLoader.ts - loadFallbackConfig: 回退模型配置加载完成 {
  enabled: true,
  primaryModel: 'gemini-2.5-pro',
  fallbackModel: 'gemini-2.5-flash',
  maxRetries: 3
}
[fallback/FallbackManager] 回退管理器初始化
[fallback/FallbackManager] 配置: {
  enabled: true,
  primaryModel: 'gemini-2.5-pro',
  fallbackModel: 'gemini-2.5-flash'
}
[fallback/SqliteFallbackPersistence] 初始化SQLite持久化服务，数据库路径: /Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/.gemini/fallback-state.db
[fallback/SqliteFallbackPersistence] 初始化SQLite数据库连接
[fallback/SqliteFallbackPersistence] SQLite数据库初始化完成
2025-07-25T04:29:35.024Z [BRIDGE-SERVER] [INFO] SQLite fallback persistence database initialized successfully
[fallback/FallbackService] 使用SQLite持久化，数据库路径: .gemini/fallback-state.db
[fallback/FallbackService] 回退服务初始化完成
[fallback/FallbackService] 主模型: gemini-2.5-pro
[fallback/FallbackService] 回退模型: gemini-2.5-flash
[fallback/FallbackService] 启用状态: true
[fallback/SqliteFallbackPersistence] 开始加载回退状态
[fallback/SqliteFallbackPersistence] 数据库中无回退状态记录，返回null
[fallback/FallbackManager] 回退服务初始化成功
2025-07-25T04:29:35.026Z [BRIDGE-SERVER] [INFO] Fallback service initialized successfully
[GeminiApiClient] [回退时序2] 回退管理器初始化成功
2025-07-25T04:29:35.026Z [BRIDGE-SERVER] [INFO] Fallback manager initialized successfully
[GeminiApiClient] [回退时序3] 回退管理器初始化流程结束
[fallback/FallbackService] 未找到持久化状态，使用默认状态
[GeminiApiClient] [请求时序3] 初始化等待完成
[GeminiApiClient] [请求时序4] 开始获取轮换API Key
[rotation/RotationService] [API请求] 请求获取API Key，当前状态: enabled=true, manager=true, initializing=false
[rotation/RotationService] [API请求] 从轮换管理器获取下一个API Key
[rotation/ApiKeyRotationManager] 请求获取下一个API Key，当前索引: 0
[rotation/ApiKeyRotationManager] 开始轮换查找，最大尝试次数: 2
[rotation/ApiKeyRotationManager] 尝试第1次，检查索引0的Key状态: active
[rotation/ApiKeyRotationManager] Key 1/2 可用，开始使用
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 3,
  keysCount: 2,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 3,
  keysCount: 2
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
[rotation/ApiKeyRotationManager] 成功获取API Key: AIzaSyAN8B...
[rotation/RotationService] [API请求] 成功获取轮换API Key: AIzaSyAN8B...
[GeminiApiClient] [请求时序5] 成功获取轮换API Key
[GeminiApiClient] [请求时序6] 开始执行实际请求
[GeminiApiClient] [回退时序4] 当前使用模型: gemini-2.5-pro
2025-07-25T04:29:35.030Z [BRIDGE-SERVER] [INFO] Calling Gemini API { model: 'gemini-2.5-pro' }
[GeminiApiClient] [请求时序7] 使用轮换API Key创建ContentGenerator
[GeminiApiClient] [DEBUG] 动态配置详情: {
  model: 'gemini-2.5-pro',
  hasApiKey: true,
  apiKeyPrefix: 'AIzaSyAN8B...',
  authType: 'gemini-api-key'
}
[rotation/RotationService] 报告API Key使用结果: key=AIzaSyAN8B..., success=true, errorType=undefined
[rotation/ApiKeyRotationManager] 报告API Key使用结果: key=AIzaSyAN8B..., success=true, errorType=undefined
[rotation/ApiKeyRotationManager] Key 1 使用成功，更新统计信息
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 3,
  keysCount: 2,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 3,
  keysCount: 2
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
[rotation/ApiKeyRotationManager] Key 1 使用报告处理完成
[rotation/RotationService] API Key使用报告成功提交
2025-07-25T04:29:39.321Z [BRIDGE-SERVER] [INFO] OpenAI bridge request finished {
  requestId: 'b10a6ab6-244c-429e-97db-f3dacc70fe2b',
  status: 'success',
  durationMs: 4363
}
2025-07-25T04:29:39.520Z [BRIDGE-SERVER] [INFO] OpenAI bridge request received {
  requestId: '68d1fc81-9ac4-4952-a791-a2eebaa1b245',
  model: 'gemini-2.5-pro',
  stream: true
}
[GeminiApiClient] [客户端时序1] 开始初始化API Key轮换服务
[GeminiApiClient] [客户端时序2] 创建RotationService实例
[GeminiApiClient] [客户端时序3] 调用RotationService.initialize()
[rotation/RotationService] [时序1] 开始初始化轮换服务
[rotation/RotationService] [时序2] 检查多账号模式配置
[DEBUG] /rotation/ConfigLoader.ts - isMultiAccountEnabled: 检查多账号模式 {
  enabled: true,
  hasMultiAccounts: true,
  hasIndividualKeys: false,
  result: true
}
[rotation/RotationService] [时序3] 多账号模式检查结果: true
[rotation/RotationService] [时序5] 开始加载轮换配置
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 开始加载轮换配置
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 开始加载多账号配置
[DEBUG] /rotation/ConfigLoader.ts - isMultiAccountEnabled: 检查多账号模式 {
  enabled: true,
  hasMultiAccounts: true,
  hasIndividualKeys: false,
  result: true
}
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 检查GEMINI_MULTI_ACCOUNTS环境变量 { hasJson: true }
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 解析GEMINI_MULTI_ACCOUNTS JSON
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: JSON配置验证成功 { accountCount: 2 }
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 多账号配置加载完成 { hasMultiAccount: true, accountCount: 2 }
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 轮换配置构建完成 {
  strategy: 'round-robin',
  accountCount: 2,
  enableFallback: true,
  maxRequestsPerKey: undefined,
  rotationInterval: undefined
}
[rotation/RotationService] [时序6] 配置加载完成，账号数量: 2
[rotation/RotationService] [时序8] 开始初始化轮换管理器
[rotation/ApiKeyRotationManager] 开始初始化轮换管理器
[rotation/ApiKeyRotationManager] 加载持久化数据
[DEBUG] /rotation/PersistenceService.ts - loadData: 开始加载持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json'
}
[GeminiApiClient] [请求时序1] 收到sendMessageStream请求
[GeminiApiClient] [请求时序2] 检测到初始化正在进行，等待完成...
[DEBUG] /rotation/PersistenceService.ts - loadData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - loadData: 读取持久化文件内容
[DEBUG] /rotation/PersistenceService.ts - loadData: 持久化数据解析成功 { currentIndex: 0, totalRequests: 3, keysCount: 2 }
[DEBUG] /rotation/PersistenceService.ts - loadData: 释放文件锁
[rotation/ApiKeyRotationManager] 持久化数据加载结果: 成功
[rotation/ApiKeyRotationManager] 初始化API Keys
[rotation/ApiKeyRotationManager] 开始初始化API Keys
[rotation/ApiKeyRotationManager] 使用多账号配置，账号数量: 2
[rotation/ApiKeyRotationManager] 初始化第1个API Key: AIzaSyAN8B...
[rotation/ApiKeyRotationManager] 初始化第2个API Key: AIzaSyAGqu...
2025-07-25T04:29:39.524Z [BRIDGE-SERVER] [INFO] Initialized 2 API keys
[rotation/ApiKeyRotationManager] API Keys初始化完成，共2个Key
[rotation/ApiKeyRotationManager] 恢复之前保存的状态
2025-07-25T04:29:39.524Z [BRIDGE-SERVER] [INFO] Restored API key rotation state from persistence
[rotation/ApiKeyRotationManager] 验证API Keys
[rotation/ApiKeyRotationManager] 初始化完成后保存初始状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 3,
  keysCount: 2,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 3,
  keysCount: 2
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
2025-07-25T04:29:39.526Z [BRIDGE-SERVER] [INFO] API Key rotation initialized with 2 keys
[rotation/ApiKeyRotationManager] 轮换管理器初始化完成，共2个API Key
[rotation/RotationService] [时序9] 轮换管理器初始化完成，设置服务为启用状态
2025-07-25T04:29:39.526Z [BRIDGE-SERVER] [INFO] API Key rotation service initialized successfully
[rotation/RotationService] [时序10] API Key轮换服务初始化成功
[GeminiApiClient] [客户端时序4] API Key轮换服务初始化成功
[GeminiApiClient] [客户端时序5] 初始化流程完成
[GeminiApiClient] [回退时序1] 开始初始化回退管理器
[DEBUG] /rotation/ConfigLoader.ts - loadFallbackConfig: 开始加载回退模型配置
[DEBUG] /rotation/ConfigLoader.ts - loadFallbackConfig: 回退模型配置加载完成 {
  enabled: true,
  primaryModel: 'gemini-2.5-pro',
  fallbackModel: 'gemini-2.5-flash',
  maxRetries: 3
}
[fallback/FallbackManager] 回退管理器初始化
[fallback/FallbackManager] 配置: {
  enabled: true,
  primaryModel: 'gemini-2.5-pro',
  fallbackModel: 'gemini-2.5-flash'
}
[fallback/SqliteFallbackPersistence] 初始化SQLite持久化服务，数据库路径: /Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/.gemini/fallback-state.db
[fallback/SqliteFallbackPersistence] 初始化SQLite数据库连接
[fallback/SqliteFallbackPersistence] SQLite数据库初始化完成
2025-07-25T04:29:39.528Z [BRIDGE-SERVER] [INFO] SQLite fallback persistence database initialized successfully
[fallback/FallbackService] 使用SQLite持久化，数据库路径: .gemini/fallback-state.db
[fallback/FallbackService] 回退服务初始化完成
[fallback/FallbackService] 主模型: gemini-2.5-pro
[fallback/FallbackService] 回退模型: gemini-2.5-flash
[fallback/FallbackService] 启用状态: true
[fallback/SqliteFallbackPersistence] 开始加载回退状态
[fallback/SqliteFallbackPersistence] 数据库中无回退状态记录，返回null
[fallback/FallbackManager] 回退服务初始化成功
2025-07-25T04:29:39.528Z [BRIDGE-SERVER] [INFO] Fallback service initialized successfully
[GeminiApiClient] [回退时序2] 回退管理器初始化成功
2025-07-25T04:29:39.528Z [BRIDGE-SERVER] [INFO] Fallback manager initialized successfully
[GeminiApiClient] [回退时序3] 回退管理器初始化流程结束
[fallback/FallbackService] 未找到持久化状态，使用默认状态
[GeminiApiClient] [请求时序3] 初始化等待完成
[GeminiApiClient] [请求时序4] 开始获取轮换API Key
[rotation/RotationService] [API请求] 请求获取API Key，当前状态: enabled=true, manager=true, initializing=false
[rotation/RotationService] [API请求] 从轮换管理器获取下一个API Key
[rotation/ApiKeyRotationManager] 请求获取下一个API Key，当前索引: 0
[rotation/ApiKeyRotationManager] 开始轮换查找，最大尝试次数: 2
[rotation/ApiKeyRotationManager] 尝试第1次，检查索引0的Key状态: active
[rotation/ApiKeyRotationManager] Key 1/2 可用，开始使用
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 4,
  keysCount: 2,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 4,
  keysCount: 2
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
[rotation/ApiKeyRotationManager] 成功获取API Key: AIzaSyAN8B...
[rotation/RotationService] [API请求] 成功获取轮换API Key: AIzaSyAN8B...
[GeminiApiClient] [请求时序5] 成功获取轮换API Key
[GeminiApiClient] [请求时序6] 开始执行实际请求
[GeminiApiClient] [回退时序4] 当前使用模型: gemini-2.5-pro
2025-07-25T04:29:39.530Z [BRIDGE-SERVER] [INFO] Calling Gemini API { model: 'gemini-2.5-pro' }
[GeminiApiClient] [请求时序7] 使用轮换API Key创建ContentGenerator
[GeminiApiClient] [DEBUG] 动态配置详情: {
  model: 'gemini-2.5-pro',
  hasApiKey: true,
  apiKeyPrefix: 'AIzaSyAN8B...',
  authType: 'gemini-api-key'
}
[rotation/RotationService] 报告API Key使用结果: key=AIzaSyAN8B..., success=true, errorType=undefined
[rotation/ApiKeyRotationManager] 报告API Key使用结果: key=AIzaSyAN8B..., success=true, errorType=undefined
[rotation/ApiKeyRotationManager] Key 1 使用成功，更新统计信息
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 4,
  keysCount: 2,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 4,
  keysCount: 2
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
[rotation/ApiKeyRotationManager] Key 1 使用报告处理完成
[rotation/RotationService] API Key使用报告成功提交
2025-07-25T04:29:47.080Z [BRIDGE-SERVER] [INFO] OpenAI bridge request finished {
  requestId: '68d1fc81-9ac4-4952-a791-a2eebaa1b245',
  status: 'success',
  durationMs: 7560
}
