2025-07-25T04:57:50.735Z [BRIDGE-SERVER] [INFO] OpenAI bridge request received {
  requestId: '877293f7-5a05-4130-acee-5c9e6d3e43ca',
  model: 'gemini-2.5-pro',
  stream: true
}
[GeminiApiClient] [客户端时序1] 开始初始化API Key轮换服务
[GeminiApiClient] [客户端时序2] 创建RotationService实例
[GeminiApiClient] [客户端时序3] 调用RotationService.initialize()
[rotation/RotationService] [时序1] 开始初始化轮换服务
[rotation/RotationService] [时序2] 检查多账号模式配置
[DEBUG] /rotation/ConfigLoader.ts - isMultiAccountEnabled: 检查多账号模式 {
  enabled: true,
  hasMultiAccounts: true,
  hasIndividualKeys: false,
  result: true
}
[rotation/RotationService] [时序3] 多账号模式检查结果: true
[rotation/RotationService] [时序5] 开始加载轮换配置
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 开始加载轮换配置
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 开始加载多账号配置
[DEBUG] /rotation/ConfigLoader.ts - isMultiAccountEnabled: 检查多账号模式 {
  enabled: true,
  hasMultiAccounts: true,
  hasIndividualKeys: false,
  result: true
}
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 检查GEMINI_MULTI_ACCOUNTS环境变量 { hasJson: true }
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 解析GEMINI_MULTI_ACCOUNTS JSON
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: JSON配置验证成功 { accountCount: 3 }
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 多账号配置加载完成 { hasMultiAccount: true, accountCount: 3 }
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 轮换配置构建完成 {
  strategy: 'round-robin',
  accountCount: 3,
  enableFallback: true,
  maxRequestsPerKey: undefined,
  rotationInterval: undefined
}
[rotation/RotationService] [时序6] 配置加载完成，账号数量: 3
[rotation/RotationService] [时序8] 开始初始化轮换管理器
[rotation/ApiKeyRotationManager] 开始初始化轮换管理器
[rotation/ApiKeyRotationManager] 加载持久化数据
[DEBUG] /rotation/PersistenceService.ts - loadData: 开始加载持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json'
}
[GeminiApiClient] [请求时序1] 收到sendMessageStream请求
[GeminiApiClient] [请求时序2] 检测到初始化正在进行，等待完成...
[DEBUG] /rotation/PersistenceService.ts - loadData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - loadData: 读取持久化文件内容
[DEBUG] /rotation/PersistenceService.ts - loadData: 持久化数据解析成功 { currentIndex: 0, totalRequests: 0, keysCount: 3 }
[DEBUG] /rotation/PersistenceService.ts - loadData: 释放文件锁
[rotation/ApiKeyRotationManager] 持久化数据加载结果: 成功
[rotation/ApiKeyRotationManager] 初始化API Keys
[rotation/ApiKeyRotationManager] 开始初始化API Keys
[rotation/ApiKeyRotationManager] 使用多账号配置，账号数量: 3
[rotation/ApiKeyRotationManager] 初始化第1个API Key: AIzaSyAN8B...
[rotation/ApiKeyRotationManager] 初始化第2个API Key: AIzaSyAGqu...
[rotation/ApiKeyRotationManager] 初始化第3个API Key: AIzaSyBIy5...
2025-07-25T04:57:50.738Z [BRIDGE-SERVER] [INFO] Initialized 3 API keys
[rotation/ApiKeyRotationManager] API Keys初始化完成，共3个Key
[rotation/ApiKeyRotationManager] 恢复之前保存的状态
2025-07-25T04:57:50.739Z [BRIDGE-SERVER] [INFO] Restored API key rotation state from persistence
[rotation/ApiKeyRotationManager] 验证API Keys
[rotation/ApiKeyRotationManager] 初始化完成后保存初始状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 0,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 0,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
2025-07-25T04:57:50.740Z [BRIDGE-SERVER] [INFO] API Key rotation initialized with 3 keys
[rotation/ApiKeyRotationManager] 轮换管理器初始化完成，共3个API Key
[rotation/RotationService] [时序9] 轮换管理器初始化完成，设置服务为启用状态
2025-07-25T04:57:50.741Z [BRIDGE-SERVER] [INFO] API Key rotation service initialized successfully
[rotation/RotationService] [时序10] API Key轮换服务初始化成功
[GeminiApiClient] [客户端时序4] API Key轮换服务初始化成功
[GeminiApiClient] [客户端时序5] 初始化流程完成
[GeminiApiClient] [回退时序1] 开始初始化回退管理器
[DEBUG] /rotation/ConfigLoader.ts - loadFallbackConfig: 开始加载回退模型配置
[DEBUG] /rotation/ConfigLoader.ts - loadFallbackConfig: 回退模型配置加载完成 {
  enabled: true,
  primaryModel: 'gemini-2.5-pro',
  fallbackModel: 'gemini-2.5-flash',
  maxRetries: 3
}
[fallback/FallbackManager] 回退管理器初始化
[fallback/FallbackManager] 配置: {
  enabled: true,
  primaryModel: 'gemini-2.5-pro',
  fallbackModel: 'gemini-2.5-flash'
}
[fallback/SqliteFallbackPersistence] 初始化SQLite持久化服务，数据库路径: /Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/.gemini/fallback-state.db
[fallback/SqliteFallbackPersistence] 初始化SQLite数据库连接
[fallback/SqliteFallbackPersistence] SQLite数据库初始化完成
2025-07-25T04:57:50.767Z [BRIDGE-SERVER] [INFO] SQLite fallback persistence database initialized successfully
[fallback/FallbackService] 使用SQLite持久化，数据库路径: .gemini/fallback-state.db
[fallback/FallbackService] 回退服务初始化完成
[fallback/FallbackService] 主模型: gemini-2.5-pro
[fallback/FallbackService] 回退模型: gemini-2.5-flash
[fallback/FallbackService] 启用状态: true
[fallback/SqliteFallbackPersistence] 开始加载回退状态
[fallback/SqliteFallbackPersistence] 数据库中无回退状态记录，返回null
[fallback/FallbackManager] 回退服务初始化成功
2025-07-25T04:57:50.768Z [BRIDGE-SERVER] [INFO] Fallback service initialized successfully
[GeminiApiClient] [回退时序2] 回退管理器初始化成功
2025-07-25T04:57:50.768Z [BRIDGE-SERVER] [INFO] Fallback manager initialized successfully
[GeminiApiClient] [回退时序3] 回退管理器初始化流程结束
[fallback/FallbackService] 未找到持久化状态，使用默认状态
[GeminiApiClient] [请求时序3] 初始化等待完成
[GeminiApiClient] [请求时序4] 开始获取轮换API Key
[rotation/RotationService] [API请求] 请求获取API Key，当前状态: enabled=true, manager=true, initializing=false
[rotation/RotationService] [API请求] 从轮换管理器获取下一个API Key
[rotation/ApiKeyRotationManager] 请求获取下一个API Key，当前索引: 0
[rotation/ApiKeyRotationManager] 开始轮换查找，最大尝试次数: 3
[rotation/ApiKeyRotationManager] 尝试第1次，检查索引0的Key状态: active
[rotation/ApiKeyRotationManager] Key 1/3 可用，开始使用
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 1,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 1,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
[rotation/ApiKeyRotationManager] 成功获取API Key: AIzaSyAN8B...
[rotation/RotationService] [API请求] 成功获取轮换API Key: AIzaSyAN8B...
[GeminiApiClient] [请求时序5] 成功获取轮换API Key
[GeminiApiClient] [请求时序6] 开始执行实际请求
[GeminiApiClient] [回退时序4] 当前使用模型: gemini-2.5-pro
2025-07-25T04:57:50.771Z [BRIDGE-SERVER] [INFO] Calling Gemini API { model: 'gemini-2.5-pro' }
[GeminiApiClient] [请求时序7] 使用轮换API Key创建ContentGenerator
[GeminiApiClient] [DEBUG] 动态配置详情: {
  model: 'gemini-2.5-pro',
  hasApiKey: true,
  apiKeyPrefix: 'AIzaSyAN8B...',
  authType: 'gemini-api-key'
}
[rotation/RotationService] 报告API Key使用结果: key=AIzaSyAN8B..., success=true, errorType=undefined
[rotation/ApiKeyRotationManager] 报告API Key使用结果: key=AIzaSyAN8B..., success=true, errorType=undefined
[rotation/ApiKeyRotationManager] Key 1 使用成功，更新统计信息
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 1,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 1,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
[rotation/ApiKeyRotationManager] Key 1 使用报告处理完成
[rotation/RotationService] API Key使用报告成功提交
2025-07-25T04:58:28.351Z [BRIDGE-SERVER] [INFO] OpenAI bridge request finished {
  requestId: '877293f7-5a05-4130-acee-5c9e6d3e43ca',
  status: 'success',
  durationMs: 37617
}
2025-07-25T04:58:32.223Z [BRIDGE-SERVER] [INFO] OpenAI bridge request received {
  requestId: '12d0430a-4b1d-4aa4-ad84-ad6267beecf4',
  model: 'gemini-2.5-pro',
  stream: true
}
[GeminiApiClient] [客户端时序1] 开始初始化API Key轮换服务
[GeminiApiClient] [客户端时序2] 创建RotationService实例
[GeminiApiClient] [客户端时序3] 调用RotationService.initialize()
[rotation/RotationService] [时序1] 开始初始化轮换服务
[rotation/RotationService] [时序2] 检查多账号模式配置
[DEBUG] /rotation/ConfigLoader.ts - isMultiAccountEnabled: 检查多账号模式 {
  enabled: true,
  hasMultiAccounts: true,
  hasIndividualKeys: false,
  result: true
}
[rotation/RotationService] [时序3] 多账号模式检查结果: true
[rotation/RotationService] [时序5] 开始加载轮换配置
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 开始加载轮换配置
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 开始加载多账号配置
[DEBUG] /rotation/ConfigLoader.ts - isMultiAccountEnabled: 检查多账号模式 {
  enabled: true,
  hasMultiAccounts: true,
  hasIndividualKeys: false,
  result: true
}
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 检查GEMINI_MULTI_ACCOUNTS环境变量 { hasJson: true }
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 解析GEMINI_MULTI_ACCOUNTS JSON
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: JSON配置验证成功 { accountCount: 3 }
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 多账号配置加载完成 { hasMultiAccount: true, accountCount: 3 }
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 轮换配置构建完成 {
  strategy: 'round-robin',
  accountCount: 3,
  enableFallback: true,
  maxRequestsPerKey: undefined,
  rotationInterval: undefined
}
[rotation/RotationService] [时序6] 配置加载完成，账号数量: 3
[rotation/RotationService] [时序8] 开始初始化轮换管理器
[rotation/ApiKeyRotationManager] 开始初始化轮换管理器
[rotation/ApiKeyRotationManager] 加载持久化数据
[DEBUG] /rotation/PersistenceService.ts - loadData: 开始加载持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json'
}
[GeminiApiClient] [请求时序1] 收到sendMessageStream请求
[GeminiApiClient] [请求时序2] 检测到初始化正在进行，等待完成...
[DEBUG] /rotation/PersistenceService.ts - loadData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - loadData: 读取持久化文件内容
[DEBUG] /rotation/PersistenceService.ts - loadData: 持久化数据解析成功 { currentIndex: 0, totalRequests: 1, keysCount: 3 }
[DEBUG] /rotation/PersistenceService.ts - loadData: 释放文件锁
[rotation/ApiKeyRotationManager] 持久化数据加载结果: 成功
[rotation/ApiKeyRotationManager] 初始化API Keys
[rotation/ApiKeyRotationManager] 开始初始化API Keys
[rotation/ApiKeyRotationManager] 使用多账号配置，账号数量: 3
[rotation/ApiKeyRotationManager] 初始化第1个API Key: AIzaSyAN8B...
[rotation/ApiKeyRotationManager] 初始化第2个API Key: AIzaSyAGqu...
[rotation/ApiKeyRotationManager] 初始化第3个API Key: AIzaSyBIy5...
2025-07-25T04:58:32.226Z [BRIDGE-SERVER] [INFO] Initialized 3 API keys
[rotation/ApiKeyRotationManager] API Keys初始化完成，共3个Key
[rotation/ApiKeyRotationManager] 恢复之前保存的状态
2025-07-25T04:58:32.226Z [BRIDGE-SERVER] [INFO] Restored API key rotation state from persistence
[rotation/ApiKeyRotationManager] 验证API Keys
[rotation/ApiKeyRotationManager] 初始化完成后保存初始状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 1,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 1,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
2025-07-25T04:58:32.227Z [BRIDGE-SERVER] [INFO] API Key rotation initialized with 3 keys
[rotation/ApiKeyRotationManager] 轮换管理器初始化完成，共3个API Key
[rotation/RotationService] [时序9] 轮换管理器初始化完成，设置服务为启用状态
2025-07-25T04:58:32.227Z [BRIDGE-SERVER] [INFO] API Key rotation service initialized successfully
[rotation/RotationService] [时序10] API Key轮换服务初始化成功
[GeminiApiClient] [客户端时序4] API Key轮换服务初始化成功
[GeminiApiClient] [客户端时序5] 初始化流程完成
[GeminiApiClient] [回退时序1] 开始初始化回退管理器
[DEBUG] /rotation/ConfigLoader.ts - loadFallbackConfig: 开始加载回退模型配置
[DEBUG] /rotation/ConfigLoader.ts - loadFallbackConfig: 回退模型配置加载完成 {
  enabled: true,
  primaryModel: 'gemini-2.5-pro',
  fallbackModel: 'gemini-2.5-flash',
  maxRetries: 3
}
[fallback/FallbackManager] 回退管理器初始化
[fallback/FallbackManager] 配置: {
  enabled: true,
  primaryModel: 'gemini-2.5-pro',
  fallbackModel: 'gemini-2.5-flash'
}
[fallback/SqliteFallbackPersistence] 初始化SQLite持久化服务，数据库路径: /Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/.gemini/fallback-state.db
[fallback/SqliteFallbackPersistence] 初始化SQLite数据库连接
[fallback/SqliteFallbackPersistence] SQLite数据库初始化完成
2025-07-25T04:58:32.233Z [BRIDGE-SERVER] [INFO] SQLite fallback persistence database initialized successfully
[fallback/FallbackService] 使用SQLite持久化，数据库路径: .gemini/fallback-state.db
[fallback/FallbackService] 回退服务初始化完成
[fallback/FallbackService] 主模型: gemini-2.5-pro
[fallback/FallbackService] 回退模型: gemini-2.5-flash
[fallback/FallbackService] 启用状态: true
[fallback/SqliteFallbackPersistence] 开始加载回退状态
[fallback/SqliteFallbackPersistence] 数据库中无回退状态记录，返回null
[fallback/FallbackManager] 回退服务初始化成功
2025-07-25T04:58:32.234Z [BRIDGE-SERVER] [INFO] Fallback service initialized successfully
[GeminiApiClient] [回退时序2] 回退管理器初始化成功
2025-07-25T04:58:32.234Z [BRIDGE-SERVER] [INFO] Fallback manager initialized successfully
[GeminiApiClient] [回退时序3] 回退管理器初始化流程结束
[fallback/FallbackService] 未找到持久化状态，使用默认状态
[GeminiApiClient] [请求时序3] 初始化等待完成
[GeminiApiClient] [请求时序4] 开始获取轮换API Key
[rotation/RotationService] [API请求] 请求获取API Key，当前状态: enabled=true, manager=true, initializing=false
[rotation/RotationService] [API请求] 从轮换管理器获取下一个API Key
[rotation/ApiKeyRotationManager] 请求获取下一个API Key，当前索引: 0
[rotation/ApiKeyRotationManager] 开始轮换查找，最大尝试次数: 3
[rotation/ApiKeyRotationManager] 尝试第1次，检查索引0的Key状态: active
[rotation/ApiKeyRotationManager] Key 1/3 可用，开始使用
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 2,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 2,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
[rotation/ApiKeyRotationManager] 成功获取API Key: AIzaSyAN8B...
[rotation/RotationService] [API请求] 成功获取轮换API Key: AIzaSyAN8B...
[GeminiApiClient] [请求时序5] 成功获取轮换API Key
[GeminiApiClient] [请求时序6] 开始执行实际请求
[GeminiApiClient] [回退时序4] 当前使用模型: gemini-2.5-pro
2025-07-25T04:58:32.236Z [BRIDGE-SERVER] [INFO] Calling Gemini API { model: 'gemini-2.5-pro' }
[GeminiApiClient] [请求时序7] 使用轮换API Key创建ContentGenerator
[GeminiApiClient] [DEBUG] 动态配置详情: {
  model: 'gemini-2.5-pro',
  hasApiKey: true,
  apiKeyPrefix: 'AIzaSyAN8B...',
  authType: 'gemini-api-key'
}
[rotation/RotationService] 报告API Key使用结果: key=AIzaSyAN8B..., success=true, errorType=undefined
[rotation/ApiKeyRotationManager] 报告API Key使用结果: key=AIzaSyAN8B..., success=true, errorType=undefined
[rotation/ApiKeyRotationManager] Key 1 使用成功，更新统计信息
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 2,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 2,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
[rotation/ApiKeyRotationManager] Key 1 使用报告处理完成
[rotation/RotationService] API Key使用报告成功提交
2025-07-25T04:58:36.788Z [BRIDGE-SERVER] [INFO] OpenAI bridge request finished {
  requestId: '12d0430a-4b1d-4aa4-ad84-ad6267beecf4',
  status: 'success',
  durationMs: 4565
}
2025-07-25T04:58:36.967Z [BRIDGE-SERVER] [INFO] OpenAI bridge request received {
  requestId: '97c04880-1744-4843-b408-b63c7879b352',
  model: 'gemini-2.5-pro',
  stream: true
}
[GeminiApiClient] [客户端时序1] 开始初始化API Key轮换服务
[GeminiApiClient] [客户端时序2] 创建RotationService实例
[GeminiApiClient] [客户端时序3] 调用RotationService.initialize()
[rotation/RotationService] [时序1] 开始初始化轮换服务
[rotation/RotationService] [时序2] 检查多账号模式配置
[DEBUG] /rotation/ConfigLoader.ts - isMultiAccountEnabled: 检查多账号模式 {
  enabled: true,
  hasMultiAccounts: true,
  hasIndividualKeys: false,
  result: true
}
[rotation/RotationService] [时序3] 多账号模式检查结果: true
[rotation/RotationService] [时序5] 开始加载轮换配置
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 开始加载轮换配置
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 开始加载多账号配置
[DEBUG] /rotation/ConfigLoader.ts - isMultiAccountEnabled: 检查多账号模式 {
  enabled: true,
  hasMultiAccounts: true,
  hasIndividualKeys: false,
  result: true
}
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 检查GEMINI_MULTI_ACCOUNTS环境变量 { hasJson: true }
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 解析GEMINI_MULTI_ACCOUNTS JSON
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: JSON配置验证成功 { accountCount: 3 }
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 多账号配置加载完成 { hasMultiAccount: true, accountCount: 3 }
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 轮换配置构建完成 {
  strategy: 'round-robin',
  accountCount: 3,
  enableFallback: true,
  maxRequestsPerKey: undefined,
  rotationInterval: undefined
}
[rotation/RotationService] [时序6] 配置加载完成，账号数量: 3
[rotation/RotationService] [时序8] 开始初始化轮换管理器
[rotation/ApiKeyRotationManager] 开始初始化轮换管理器
[rotation/ApiKeyRotationManager] 加载持久化数据
[DEBUG] /rotation/PersistenceService.ts - loadData: 开始加载持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json'
}
[GeminiApiClient] [请求时序1] 收到sendMessageStream请求
[GeminiApiClient] [请求时序2] 检测到初始化正在进行，等待完成...
[DEBUG] /rotation/PersistenceService.ts - loadData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - loadData: 读取持久化文件内容
[DEBUG] /rotation/PersistenceService.ts - loadData: 持久化数据解析成功 { currentIndex: 0, totalRequests: 2, keysCount: 3 }
[DEBUG] /rotation/PersistenceService.ts - loadData: 释放文件锁
[rotation/ApiKeyRotationManager] 持久化数据加载结果: 成功
[rotation/ApiKeyRotationManager] 初始化API Keys
[rotation/ApiKeyRotationManager] 开始初始化API Keys
[rotation/ApiKeyRotationManager] 使用多账号配置，账号数量: 3
[rotation/ApiKeyRotationManager] 初始化第1个API Key: AIzaSyAN8B...
[rotation/ApiKeyRotationManager] 初始化第2个API Key: AIzaSyAGqu...
[rotation/ApiKeyRotationManager] 初始化第3个API Key: AIzaSyBIy5...
2025-07-25T04:58:36.971Z [BRIDGE-SERVER] [INFO] Initialized 3 API keys
[rotation/ApiKeyRotationManager] API Keys初始化完成，共3个Key
[rotation/ApiKeyRotationManager] 恢复之前保存的状态
2025-07-25T04:58:36.971Z [BRIDGE-SERVER] [INFO] Restored API key rotation state from persistence
[rotation/ApiKeyRotationManager] 验证API Keys
[rotation/ApiKeyRotationManager] 初始化完成后保存初始状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 2,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 2,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
2025-07-25T04:58:36.974Z [BRIDGE-SERVER] [INFO] API Key rotation initialized with 3 keys
[rotation/ApiKeyRotationManager] 轮换管理器初始化完成，共3个API Key
[rotation/RotationService] [时序9] 轮换管理器初始化完成，设置服务为启用状态
2025-07-25T04:58:36.974Z [BRIDGE-SERVER] [INFO] API Key rotation service initialized successfully
[rotation/RotationService] [时序10] API Key轮换服务初始化成功
[GeminiApiClient] [客户端时序4] API Key轮换服务初始化成功
[GeminiApiClient] [客户端时序5] 初始化流程完成
[GeminiApiClient] [回退时序1] 开始初始化回退管理器
[DEBUG] /rotation/ConfigLoader.ts - loadFallbackConfig: 开始加载回退模型配置
[DEBUG] /rotation/ConfigLoader.ts - loadFallbackConfig: 回退模型配置加载完成 {
  enabled: true,
  primaryModel: 'gemini-2.5-pro',
  fallbackModel: 'gemini-2.5-flash',
  maxRetries: 3
}
[fallback/FallbackManager] 回退管理器初始化
[fallback/FallbackManager] 配置: {
  enabled: true,
  primaryModel: 'gemini-2.5-pro',
  fallbackModel: 'gemini-2.5-flash'
}
[fallback/SqliteFallbackPersistence] 初始化SQLite持久化服务，数据库路径: /Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/.gemini/fallback-state.db
[fallback/SqliteFallbackPersistence] 初始化SQLite数据库连接
[fallback/SqliteFallbackPersistence] SQLite数据库初始化完成
2025-07-25T04:58:36.976Z [BRIDGE-SERVER] [INFO] SQLite fallback persistence database initialized successfully
[fallback/FallbackService] 使用SQLite持久化，数据库路径: .gemini/fallback-state.db
[fallback/FallbackService] 回退服务初始化完成
[fallback/FallbackService] 主模型: gemini-2.5-pro
[fallback/FallbackService] 回退模型: gemini-2.5-flash
[fallback/FallbackService] 启用状态: true
[fallback/SqliteFallbackPersistence] 开始加载回退状态
[fallback/SqliteFallbackPersistence] 数据库中无回退状态记录，返回null
[fallback/FallbackManager] 回退服务初始化成功
2025-07-25T04:58:36.977Z [BRIDGE-SERVER] [INFO] Fallback service initialized successfully
[GeminiApiClient] [回退时序2] 回退管理器初始化成功
2025-07-25T04:58:36.977Z [BRIDGE-SERVER] [INFO] Fallback manager initialized successfully
[GeminiApiClient] [回退时序3] 回退管理器初始化流程结束
[fallback/FallbackService] 未找到持久化状态，使用默认状态
[GeminiApiClient] [请求时序3] 初始化等待完成
[GeminiApiClient] [请求时序4] 开始获取轮换API Key
[rotation/RotationService] [API请求] 请求获取API Key，当前状态: enabled=true, manager=true, initializing=false
[rotation/RotationService] [API请求] 从轮换管理器获取下一个API Key
[rotation/ApiKeyRotationManager] 请求获取下一个API Key，当前索引: 0
[rotation/ApiKeyRotationManager] 开始轮换查找，最大尝试次数: 3
[rotation/ApiKeyRotationManager] 尝试第1次，检查索引0的Key状态: active
[rotation/ApiKeyRotationManager] Key 1/3 可用，开始使用
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 3,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 3,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
[rotation/ApiKeyRotationManager] 成功获取API Key: AIzaSyAN8B...
[rotation/RotationService] [API请求] 成功获取轮换API Key: AIzaSyAN8B...
[GeminiApiClient] [请求时序5] 成功获取轮换API Key
[GeminiApiClient] [请求时序6] 开始执行实际请求
[GeminiApiClient] [回退时序4] 当前使用模型: gemini-2.5-pro
2025-07-25T04:58:36.980Z [BRIDGE-SERVER] [INFO] Calling Gemini API { model: 'gemini-2.5-pro' }
[GeminiApiClient] [请求时序7] 使用轮换API Key创建ContentGenerator
[GeminiApiClient] [DEBUG] 动态配置详情: {
  model: 'gemini-2.5-pro',
  hasApiKey: true,
  apiKeyPrefix: 'AIzaSyAN8B...',
  authType: 'gemini-api-key'
}
[rotation/RotationService] 报告API Key使用结果: key=AIzaSyAN8B..., success=true, errorType=undefined
[rotation/ApiKeyRotationManager] 报告API Key使用结果: key=AIzaSyAN8B..., success=true, errorType=undefined
[rotation/ApiKeyRotationManager] Key 1 使用成功，更新统计信息
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 3,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 3,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
[rotation/ApiKeyRotationManager] Key 1 使用报告处理完成
[rotation/RotationService] API Key使用报告成功提交
2025-07-25T04:58:53.385Z [BRIDGE-SERVER] [INFO] OpenAI bridge request received {
  requestId: 'c95d1278-6a0b-4cc0-b3da-d0c2ec650c65',
  model: 'gemini-2.5-pro',
  stream: true
}
[GeminiApiClient] [客户端时序1] 开始初始化API Key轮换服务
[GeminiApiClient] [客户端时序2] 创建RotationService实例
[GeminiApiClient] [客户端时序3] 调用RotationService.initialize()
[rotation/RotationService] [时序1] 开始初始化轮换服务
[rotation/RotationService] [时序2] 检查多账号模式配置
[DEBUG] /rotation/ConfigLoader.ts - isMultiAccountEnabled: 检查多账号模式 {
  enabled: true,
  hasMultiAccounts: true,
  hasIndividualKeys: false,
  result: true
}
[rotation/RotationService] [时序3] 多账号模式检查结果: true
[rotation/RotationService] [时序5] 开始加载轮换配置
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 开始加载轮换配置
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 开始加载多账号配置
[DEBUG] /rotation/ConfigLoader.ts - isMultiAccountEnabled: 检查多账号模式 {
  enabled: true,
  hasMultiAccounts: true,
  hasIndividualKeys: false,
  result: true
}
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 检查GEMINI_MULTI_ACCOUNTS环境变量 { hasJson: true }
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 解析GEMINI_MULTI_ACCOUNTS JSON
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: JSON配置验证成功 { accountCount: 3 }
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 多账号配置加载完成 { hasMultiAccount: true, accountCount: 3 }
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 轮换配置构建完成 {
  strategy: 'round-robin',
  accountCount: 3,
  enableFallback: true,
  maxRequestsPerKey: undefined,
  rotationInterval: undefined
}
[rotation/RotationService] [时序6] 配置加载完成，账号数量: 3
[rotation/RotationService] [时序8] 开始初始化轮换管理器
[rotation/ApiKeyRotationManager] 开始初始化轮换管理器
[rotation/ApiKeyRotationManager] 加载持久化数据
[DEBUG] /rotation/PersistenceService.ts - loadData: 开始加载持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json'
}
[GeminiApiClient] [请求时序1] 收到sendMessageStream请求
[GeminiApiClient] [请求时序2] 检测到初始化正在进行，等待完成...
[DEBUG] /rotation/PersistenceService.ts - loadData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - loadData: 读取持久化文件内容
[DEBUG] /rotation/PersistenceService.ts - loadData: 持久化数据解析成功 { currentIndex: 0, totalRequests: 3, keysCount: 3 }
[DEBUG] /rotation/PersistenceService.ts - loadData: 释放文件锁
[rotation/ApiKeyRotationManager] 持久化数据加载结果: 成功
[rotation/ApiKeyRotationManager] 初始化API Keys
[rotation/ApiKeyRotationManager] 开始初始化API Keys
[rotation/ApiKeyRotationManager] 使用多账号配置，账号数量: 3
[rotation/ApiKeyRotationManager] 初始化第1个API Key: AIzaSyAN8B...
[rotation/ApiKeyRotationManager] 初始化第2个API Key: AIzaSyAGqu...
[rotation/ApiKeyRotationManager] 初始化第3个API Key: AIzaSyBIy5...
2025-07-25T04:58:53.388Z [BRIDGE-SERVER] [INFO] Initialized 3 API keys
[rotation/ApiKeyRotationManager] API Keys初始化完成，共3个Key
[rotation/ApiKeyRotationManager] 恢复之前保存的状态
2025-07-25T04:58:53.388Z [BRIDGE-SERVER] [INFO] Restored API key rotation state from persistence
[rotation/ApiKeyRotationManager] 验证API Keys
[rotation/ApiKeyRotationManager] 初始化完成后保存初始状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 3,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 3,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
2025-07-25T04:58:53.391Z [BRIDGE-SERVER] [INFO] API Key rotation initialized with 3 keys
[rotation/ApiKeyRotationManager] 轮换管理器初始化完成，共3个API Key
[rotation/RotationService] [时序9] 轮换管理器初始化完成，设置服务为启用状态
2025-07-25T04:58:53.392Z [BRIDGE-SERVER] [INFO] API Key rotation service initialized successfully
[rotation/RotationService] [时序10] API Key轮换服务初始化成功
[GeminiApiClient] [客户端时序4] API Key轮换服务初始化成功
[GeminiApiClient] [客户端时序5] 初始化流程完成
[GeminiApiClient] [回退时序1] 开始初始化回退管理器
[DEBUG] /rotation/ConfigLoader.ts - loadFallbackConfig: 开始加载回退模型配置
[DEBUG] /rotation/ConfigLoader.ts - loadFallbackConfig: 回退模型配置加载完成 {
  enabled: true,
  primaryModel: 'gemini-2.5-pro',
  fallbackModel: 'gemini-2.5-flash',
  maxRetries: 3
}
[fallback/FallbackManager] 回退管理器初始化
[fallback/FallbackManager] 配置: {
  enabled: true,
  primaryModel: 'gemini-2.5-pro',
  fallbackModel: 'gemini-2.5-flash'
}
[fallback/SqliteFallbackPersistence] 初始化SQLite持久化服务，数据库路径: /Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/.gemini/fallback-state.db
[fallback/SqliteFallbackPersistence] 初始化SQLite数据库连接
[fallback/SqliteFallbackPersistence] SQLite数据库初始化完成
2025-07-25T04:58:53.394Z [BRIDGE-SERVER] [INFO] SQLite fallback persistence database initialized successfully
[fallback/FallbackService] 使用SQLite持久化，数据库路径: .gemini/fallback-state.db
[fallback/FallbackService] 回退服务初始化完成
[fallback/FallbackService] 主模型: gemini-2.5-pro
[fallback/FallbackService] 回退模型: gemini-2.5-flash
[fallback/FallbackService] 启用状态: true
[fallback/SqliteFallbackPersistence] 开始加载回退状态
[fallback/SqliteFallbackPersistence] 数据库中无回退状态记录，返回null
[fallback/FallbackManager] 回退服务初始化成功
2025-07-25T04:58:53.395Z [BRIDGE-SERVER] [INFO] Fallback service initialized successfully
[GeminiApiClient] [回退时序2] 回退管理器初始化成功
2025-07-25T04:58:53.396Z [BRIDGE-SERVER] [INFO] Fallback manager initialized successfully
[GeminiApiClient] [回退时序3] 回退管理器初始化流程结束
[fallback/FallbackService] 未找到持久化状态，使用默认状态
[GeminiApiClient] [请求时序3] 初始化等待完成
[GeminiApiClient] [请求时序4] 开始获取轮换API Key
[rotation/RotationService] [API请求] 请求获取API Key，当前状态: enabled=true, manager=true, initializing=false
[rotation/RotationService] [API请求] 从轮换管理器获取下一个API Key
[rotation/ApiKeyRotationManager] 请求获取下一个API Key，当前索引: 0
[rotation/ApiKeyRotationManager] 开始轮换查找，最大尝试次数: 3
[rotation/ApiKeyRotationManager] 尝试第1次，检查索引0的Key状态: active
[rotation/ApiKeyRotationManager] Key 1/3 可用，开始使用
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 4,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 4,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
[rotation/ApiKeyRotationManager] 成功获取API Key: AIzaSyAN8B...
[rotation/RotationService] [API请求] 成功获取轮换API Key: AIzaSyAN8B...
[GeminiApiClient] [请求时序5] 成功获取轮换API Key
[GeminiApiClient] [请求时序6] 开始执行实际请求
[GeminiApiClient] [回退时序4] 当前使用模型: gemini-2.5-pro
2025-07-25T04:58:53.398Z [BRIDGE-SERVER] [INFO] Calling Gemini API { model: 'gemini-2.5-pro' }
[GeminiApiClient] [请求时序7] 使用轮换API Key创建ContentGenerator
[GeminiApiClient] [DEBUG] 动态配置详情: {
  model: 'gemini-2.5-pro',
  hasApiKey: true,
  apiKeyPrefix: 'AIzaSyAN8B...',
  authType: 'gemini-api-key'
}
2025-07-25T04:58:53.507Z [BRIDGE-SERVER] [INFO] OpenAI bridge request finished {
  requestId: '97c04880-1744-4843-b408-b63c7879b352',
  status: 'success',
  durationMs: 16540
}
[rotation/RotationService] 报告API Key使用结果: key=AIzaSyAN8B..., success=true, errorType=undefined
[rotation/ApiKeyRotationManager] 报告API Key使用结果: key=AIzaSyAN8B..., success=true, errorType=undefined
[rotation/ApiKeyRotationManager] Key 1 使用成功，更新统计信息
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 4,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 4,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
[rotation/ApiKeyRotationManager] Key 1 使用报告处理完成
[rotation/RotationService] API Key使用报告成功提交
2025-07-25T04:59:02.803Z [BRIDGE-SERVER] [INFO] OpenAI bridge request finished {
  requestId: 'c95d1278-6a0b-4cc0-b3da-d0c2ec650c65',
  status: 'success',
  durationMs: 9418
}
2025-07-25T04:59:03.005Z [BRIDGE-SERVER] [INFO] OpenAI bridge request received {
  requestId: 'b8a4f069-124f-4829-ac29-8dbc73a04b3a',
  model: 'gemini-2.5-pro',
  stream: true
}
[GeminiApiClient] [客户端时序1] 开始初始化API Key轮换服务
[GeminiApiClient] [客户端时序2] 创建RotationService实例
[GeminiApiClient] [客户端时序3] 调用RotationService.initialize()
[rotation/RotationService] [时序1] 开始初始化轮换服务
[rotation/RotationService] [时序2] 检查多账号模式配置
[DEBUG] /rotation/ConfigLoader.ts - isMultiAccountEnabled: 检查多账号模式 {
  enabled: true,
  hasMultiAccounts: true,
  hasIndividualKeys: false,
  result: true
}
[rotation/RotationService] [时序3] 多账号模式检查结果: true
[rotation/RotationService] [时序5] 开始加载轮换配置
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 开始加载轮换配置
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 开始加载多账号配置
[DEBUG] /rotation/ConfigLoader.ts - isMultiAccountEnabled: 检查多账号模式 {
  enabled: true,
  hasMultiAccounts: true,
  hasIndividualKeys: false,
  result: true
}
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 检查GEMINI_MULTI_ACCOUNTS环境变量 { hasJson: true }
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 解析GEMINI_MULTI_ACCOUNTS JSON
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: JSON配置验证成功 { accountCount: 3 }
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 多账号配置加载完成 { hasMultiAccount: true, accountCount: 3 }
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 轮换配置构建完成 {
  strategy: 'round-robin',
  accountCount: 3,
  enableFallback: true,
  maxRequestsPerKey: undefined,
  rotationInterval: undefined
}
[rotation/RotationService] [时序6] 配置加载完成，账号数量: 3
[rotation/RotationService] [时序8] 开始初始化轮换管理器
[rotation/ApiKeyRotationManager] 开始初始化轮换管理器
[rotation/ApiKeyRotationManager] 加载持久化数据
[DEBUG] /rotation/PersistenceService.ts - loadData: 开始加载持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json'
}
[GeminiApiClient] [请求时序1] 收到sendMessageStream请求
[GeminiApiClient] [请求时序2] 检测到初始化正在进行，等待完成...
[DEBUG] /rotation/PersistenceService.ts - loadData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - loadData: 读取持久化文件内容
[DEBUG] /rotation/PersistenceService.ts - loadData: 持久化数据解析成功 { currentIndex: 0, totalRequests: 4, keysCount: 3 }
[DEBUG] /rotation/PersistenceService.ts - loadData: 释放文件锁
[rotation/ApiKeyRotationManager] 持久化数据加载结果: 成功
[rotation/ApiKeyRotationManager] 初始化API Keys
[rotation/ApiKeyRotationManager] 开始初始化API Keys
[rotation/ApiKeyRotationManager] 使用多账号配置，账号数量: 3
[rotation/ApiKeyRotationManager] 初始化第1个API Key: AIzaSyAN8B...
[rotation/ApiKeyRotationManager] 初始化第2个API Key: AIzaSyAGqu...
[rotation/ApiKeyRotationManager] 初始化第3个API Key: AIzaSyBIy5...
2025-07-25T04:59:03.008Z [BRIDGE-SERVER] [INFO] Initialized 3 API keys
[rotation/ApiKeyRotationManager] API Keys初始化完成，共3个Key
[rotation/ApiKeyRotationManager] 恢复之前保存的状态
2025-07-25T04:59:03.008Z [BRIDGE-SERVER] [INFO] Restored API key rotation state from persistence
[rotation/ApiKeyRotationManager] 验证API Keys
[rotation/ApiKeyRotationManager] 初始化完成后保存初始状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 4,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 4,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
2025-07-25T04:59:03.013Z [BRIDGE-SERVER] [INFO] API Key rotation initialized with 3 keys
[rotation/ApiKeyRotationManager] 轮换管理器初始化完成，共3个API Key
[rotation/RotationService] [时序9] 轮换管理器初始化完成，设置服务为启用状态
2025-07-25T04:59:03.014Z [BRIDGE-SERVER] [INFO] API Key rotation service initialized successfully
[rotation/RotationService] [时序10] API Key轮换服务初始化成功
[GeminiApiClient] [客户端时序4] API Key轮换服务初始化成功
[GeminiApiClient] [客户端时序5] 初始化流程完成
[GeminiApiClient] [回退时序1] 开始初始化回退管理器
[DEBUG] /rotation/ConfigLoader.ts - loadFallbackConfig: 开始加载回退模型配置
[DEBUG] /rotation/ConfigLoader.ts - loadFallbackConfig: 回退模型配置加载完成 {
  enabled: true,
  primaryModel: 'gemini-2.5-pro',
  fallbackModel: 'gemini-2.5-flash',
  maxRetries: 3
}
[fallback/FallbackManager] 回退管理器初始化
[fallback/FallbackManager] 配置: {
  enabled: true,
  primaryModel: 'gemini-2.5-pro',
  fallbackModel: 'gemini-2.5-flash'
}
[fallback/SqliteFallbackPersistence] 初始化SQLite持久化服务，数据库路径: /Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/.gemini/fallback-state.db
[fallback/SqliteFallbackPersistence] 初始化SQLite数据库连接
[fallback/SqliteFallbackPersistence] SQLite数据库初始化完成
2025-07-25T04:59:03.015Z [BRIDGE-SERVER] [INFO] SQLite fallback persistence database initialized successfully
[fallback/FallbackService] 使用SQLite持久化，数据库路径: .gemini/fallback-state.db
[fallback/FallbackService] 回退服务初始化完成
[fallback/FallbackService] 主模型: gemini-2.5-pro
[fallback/FallbackService] 回退模型: gemini-2.5-flash
[fallback/FallbackService] 启用状态: true
[fallback/SqliteFallbackPersistence] 开始加载回退状态
[fallback/SqliteFallbackPersistence] 数据库中无回退状态记录，返回null
[fallback/FallbackManager] 回退服务初始化成功
2025-07-25T04:59:03.016Z [BRIDGE-SERVER] [INFO] Fallback service initialized successfully
[GeminiApiClient] [回退时序2] 回退管理器初始化成功
2025-07-25T04:59:03.016Z [BRIDGE-SERVER] [INFO] Fallback manager initialized successfully
[GeminiApiClient] [回退时序3] 回退管理器初始化流程结束
[fallback/FallbackService] 未找到持久化状态，使用默认状态
[GeminiApiClient] [请求时序3] 初始化等待完成
[GeminiApiClient] [请求时序4] 开始获取轮换API Key
[rotation/RotationService] [API请求] 请求获取API Key，当前状态: enabled=true, manager=true, initializing=false
[rotation/RotationService] [API请求] 从轮换管理器获取下一个API Key
[rotation/ApiKeyRotationManager] 请求获取下一个API Key，当前索引: 0
[rotation/ApiKeyRotationManager] 开始轮换查找，最大尝试次数: 3
[rotation/ApiKeyRotationManager] 尝试第1次，检查索引0的Key状态: active
[rotation/ApiKeyRotationManager] Key 1/3 可用，开始使用
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 5,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 5,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
[rotation/ApiKeyRotationManager] 成功获取API Key: AIzaSyAN8B...
[rotation/RotationService] [API请求] 成功获取轮换API Key: AIzaSyAN8B...
[GeminiApiClient] [请求时序5] 成功获取轮换API Key
[GeminiApiClient] [请求时序6] 开始执行实际请求
[GeminiApiClient] [回退时序4] 当前使用模型: gemini-2.5-pro
2025-07-25T04:59:03.018Z [BRIDGE-SERVER] [INFO] Calling Gemini API { model: 'gemini-2.5-pro' }
[GeminiApiClient] [请求时序7] 使用轮换API Key创建ContentGenerator
[GeminiApiClient] [DEBUG] 动态配置详情: {
  model: 'gemini-2.5-pro',
  hasApiKey: true,
  apiKeyPrefix: 'AIzaSyAN8B...',
  authType: 'gemini-api-key'
}
[rotation/RotationService] 报告API Key使用结果: key=AIzaSyAN8B..., success=true, errorType=undefined
[rotation/ApiKeyRotationManager] 报告API Key使用结果: key=AIzaSyAN8B..., success=true, errorType=undefined
[rotation/ApiKeyRotationManager] Key 1 使用成功，更新统计信息
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 5,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 5,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
[rotation/ApiKeyRotationManager] Key 1 使用报告处理完成
[rotation/RotationService] API Key使用报告成功提交
2025-07-25T04:59:12.074Z [BRIDGE-SERVER] [INFO] OpenAI bridge request finished {
  requestId: 'b8a4f069-124f-4829-ac29-8dbc73a04b3a',
  status: 'success',
  durationMs: 9069
}
2025-07-25T04:59:12.241Z [BRIDGE-SERVER] [INFO] OpenAI bridge request received {
  requestId: 'e0bf7c70-c4ac-4640-baef-f75b68eb6bd4',
  model: 'gemini-2.5-pro',
  stream: true
}
[GeminiApiClient] [客户端时序1] 开始初始化API Key轮换服务
[GeminiApiClient] [客户端时序2] 创建RotationService实例
[GeminiApiClient] [客户端时序3] 调用RotationService.initialize()
[rotation/RotationService] [时序1] 开始初始化轮换服务
[rotation/RotationService] [时序2] 检查多账号模式配置
[DEBUG] /rotation/ConfigLoader.ts - isMultiAccountEnabled: 检查多账号模式 {
  enabled: true,
  hasMultiAccounts: true,
  hasIndividualKeys: false,
  result: true
}
[rotation/RotationService] [时序3] 多账号模式检查结果: true
[rotation/RotationService] [时序5] 开始加载轮换配置
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 开始加载轮换配置
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 开始加载多账号配置
[DEBUG] /rotation/ConfigLoader.ts - isMultiAccountEnabled: 检查多账号模式 {
  enabled: true,
  hasMultiAccounts: true,
  hasIndividualKeys: false,
  result: true
}
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 检查GEMINI_MULTI_ACCOUNTS环境变量 { hasJson: true }
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 解析GEMINI_MULTI_ACCOUNTS JSON
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: JSON配置验证成功 { accountCount: 3 }
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 多账号配置加载完成 { hasMultiAccount: true, accountCount: 3 }
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 轮换配置构建完成 {
  strategy: 'round-robin',
  accountCount: 3,
  enableFallback: true,
  maxRequestsPerKey: undefined,
  rotationInterval: undefined
}
[rotation/RotationService] [时序6] 配置加载完成，账号数量: 3
[rotation/RotationService] [时序8] 开始初始化轮换管理器
[rotation/ApiKeyRotationManager] 开始初始化轮换管理器
[rotation/ApiKeyRotationManager] 加载持久化数据
[DEBUG] /rotation/PersistenceService.ts - loadData: 开始加载持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json'
}
[GeminiApiClient] [请求时序1] 收到sendMessageStream请求
[GeminiApiClient] [请求时序2] 检测到初始化正在进行，等待完成...
[DEBUG] /rotation/PersistenceService.ts - loadData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - loadData: 读取持久化文件内容
[DEBUG] /rotation/PersistenceService.ts - loadData: 持久化数据解析成功 { currentIndex: 0, totalRequests: 5, keysCount: 3 }
[DEBUG] /rotation/PersistenceService.ts - loadData: 释放文件锁
[rotation/ApiKeyRotationManager] 持久化数据加载结果: 成功
[rotation/ApiKeyRotationManager] 初始化API Keys
[rotation/ApiKeyRotationManager] 开始初始化API Keys
[rotation/ApiKeyRotationManager] 使用多账号配置，账号数量: 3
[rotation/ApiKeyRotationManager] 初始化第1个API Key: AIzaSyAN8B...
[rotation/ApiKeyRotationManager] 初始化第2个API Key: AIzaSyAGqu...
[rotation/ApiKeyRotationManager] 初始化第3个API Key: AIzaSyBIy5...
2025-07-25T04:59:12.249Z [BRIDGE-SERVER] [INFO] Initialized 3 API keys
[rotation/ApiKeyRotationManager] API Keys初始化完成，共3个Key
[rotation/ApiKeyRotationManager] 恢复之前保存的状态
2025-07-25T04:59:12.249Z [BRIDGE-SERVER] [INFO] Restored API key rotation state from persistence
[rotation/ApiKeyRotationManager] 验证API Keys
[rotation/ApiKeyRotationManager] 初始化完成后保存初始状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 5,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 5,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
2025-07-25T04:59:12.250Z [BRIDGE-SERVER] [INFO] API Key rotation initialized with 3 keys
[rotation/ApiKeyRotationManager] 轮换管理器初始化完成，共3个API Key
[rotation/RotationService] [时序9] 轮换管理器初始化完成，设置服务为启用状态
2025-07-25T04:59:12.250Z [BRIDGE-SERVER] [INFO] API Key rotation service initialized successfully
[rotation/RotationService] [时序10] API Key轮换服务初始化成功
[GeminiApiClient] [客户端时序4] API Key轮换服务初始化成功
[GeminiApiClient] [客户端时序5] 初始化流程完成
[GeminiApiClient] [回退时序1] 开始初始化回退管理器
[DEBUG] /rotation/ConfigLoader.ts - loadFallbackConfig: 开始加载回退模型配置
[DEBUG] /rotation/ConfigLoader.ts - loadFallbackConfig: 回退模型配置加载完成 {
  enabled: true,
  primaryModel: 'gemini-2.5-pro',
  fallbackModel: 'gemini-2.5-flash',
  maxRetries: 3
}
[fallback/FallbackManager] 回退管理器初始化
[fallback/FallbackManager] 配置: {
  enabled: true,
  primaryModel: 'gemini-2.5-pro',
  fallbackModel: 'gemini-2.5-flash'
}
[fallback/SqliteFallbackPersistence] 初始化SQLite持久化服务，数据库路径: /Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/.gemini/fallback-state.db
[fallback/SqliteFallbackPersistence] 初始化SQLite数据库连接
[fallback/SqliteFallbackPersistence] SQLite数据库初始化完成
2025-07-25T04:59:12.252Z [BRIDGE-SERVER] [INFO] SQLite fallback persistence database initialized successfully
[fallback/FallbackService] 使用SQLite持久化，数据库路径: .gemini/fallback-state.db
[fallback/FallbackService] 回退服务初始化完成
[fallback/FallbackService] 主模型: gemini-2.5-pro
[fallback/FallbackService] 回退模型: gemini-2.5-flash
[fallback/FallbackService] 启用状态: true
[fallback/SqliteFallbackPersistence] 开始加载回退状态
[fallback/SqliteFallbackPersistence] 数据库中无回退状态记录，返回null
[fallback/FallbackManager] 回退服务初始化成功
2025-07-25T04:59:12.253Z [BRIDGE-SERVER] [INFO] Fallback service initialized successfully
[GeminiApiClient] [回退时序2] 回退管理器初始化成功
2025-07-25T04:59:12.253Z [BRIDGE-SERVER] [INFO] Fallback manager initialized successfully
[GeminiApiClient] [回退时序3] 回退管理器初始化流程结束
[fallback/FallbackService] 未找到持久化状态，使用默认状态
[GeminiApiClient] [请求时序3] 初始化等待完成
[GeminiApiClient] [请求时序4] 开始获取轮换API Key
[rotation/RotationService] [API请求] 请求获取API Key，当前状态: enabled=true, manager=true, initializing=false
[rotation/RotationService] [API请求] 从轮换管理器获取下一个API Key
[rotation/ApiKeyRotationManager] 请求获取下一个API Key，当前索引: 0
[rotation/ApiKeyRotationManager] 开始轮换查找，最大尝试次数: 3
[rotation/ApiKeyRotationManager] 尝试第1次，检查索引0的Key状态: active
[rotation/ApiKeyRotationManager] Key 1/3 可用，开始使用
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 6,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 6,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
[rotation/ApiKeyRotationManager] 成功获取API Key: AIzaSyAN8B...
[rotation/RotationService] [API请求] 成功获取轮换API Key: AIzaSyAN8B...
[GeminiApiClient] [请求时序5] 成功获取轮换API Key
[GeminiApiClient] [请求时序6] 开始执行实际请求
[GeminiApiClient] [回退时序4] 当前使用模型: gemini-2.5-pro
2025-07-25T04:59:12.255Z [BRIDGE-SERVER] [INFO] Calling Gemini API { model: 'gemini-2.5-pro' }
[GeminiApiClient] [请求时序7] 使用轮换API Key创建ContentGenerator
[GeminiApiClient] [DEBUG] 动态配置详情: {
  model: 'gemini-2.5-pro',
  hasApiKey: true,
  apiKeyPrefix: 'AIzaSyAN8B...',
  authType: 'gemini-api-key'
}
[fallback/errorDetection] 检查是否应该触发回退: Error: exception TypeError: fetch failed sending request
    at file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:13059:19
    at async Models.generateContentStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:14308:24)
    at async retryWithBackoff (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/utils/retry.js:62:20)
    at async GeminiChat.sendMessageStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/core/geminiChat.js:303:36)
    at async GeminiApiClient.executeStreamRequest (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/gemini-client.js:386:34)
    at async file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/bridge/openai.js:27:34
[fallback/errorDetection] 判断错误类型: Error: exception TypeError: fetch failed sending request
    at file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:13059:19
    at async Models.generateContentStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:14308:24)
    at async retryWithBackoff (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/utils/retry.js:62:20)
    at async GeminiChat.sendMessageStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/core/geminiChat.js:303:36)
    at async GeminiApiClient.executeStreamRequest (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/gemini-client.js:386:34)
    at async file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/bridge/openai.js:27:34
[fallback/errorDetection] 检测Pro模型配额超限错误: Error: exception TypeError: fetch failed sending request
    at file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:13059:19
    at async Models.generateContentStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:14308:24)
    at async retryWithBackoff (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/utils/retry.js:62:20)
    at async GeminiChat.sendMessageStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/core/geminiChat.js:303:36)
    at async GeminiApiClient.executeStreamRequest (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/gemini-client.js:386:34)
    at async file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/bridge/openai.js:27:34
[fallback/errorDetection] 检测通用配额超限错误: Error: exception TypeError: fetch failed sending request
    at file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:13059:19
    at async Models.generateContentStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:14308:24)
    at async retryWithBackoff (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/utils/retry.js:62:20)
    at async GeminiChat.sendMessageStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/core/geminiChat.js:303:36)
    at async GeminiApiClient.executeStreamRequest (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/gemini-client.js:386:34)
    at async file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/bridge/openai.js:27:34
[fallback/errorDetection] 检测Pro模型配额超限错误: Error: exception TypeError: fetch failed sending request
    at file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:13059:19
    at async Models.generateContentStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:14308:24)
    at async retryWithBackoff (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/utils/retry.js:62:20)
    at async GeminiChat.sendMessageStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/core/geminiChat.js:303:36)
    at async GeminiApiClient.executeStreamRequest (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/gemini-client.js:386:34)
    at async file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/bridge/openai.js:27:34
[fallback/errorDetection] 检测配额超限错误: Error: exception TypeError: fetch failed sending request
    at file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:13059:19
    at async Models.generateContentStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:14308:24)
    at async retryWithBackoff (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/utils/retry.js:62:20)
    at async GeminiChat.sendMessageStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/core/geminiChat.js:303:36)
    at async GeminiApiClient.executeStreamRequest (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/gemini-client.js:386:34)
    at async file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/bridge/openai.js:27:34
[fallback/errorDetection] 检测限速错误: Error: exception TypeError: fetch failed sending request
    at file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:13059:19
    at async Models.generateContentStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:14308:24)
    at async retryWithBackoff (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/utils/retry.js:62:20)
    at async GeminiChat.sendMessageStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/core/geminiChat.js:303:36)
    at async GeminiApiClient.executeStreamRequest (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/gemini-client.js:386:34)
    at async file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/bridge/openai.js:27:34
[fallback/errorDetection] 检测服务器错误: Error: exception TypeError: fetch failed sending request
    at file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:13059:19
    at async Models.generateContentStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:14308:24)
    at async retryWithBackoff (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/utils/retry.js:62:20)
    at async GeminiChat.sendMessageStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/core/geminiChat.js:303:36)
    at async GeminiApiClient.executeStreamRequest (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/gemini-client.js:386:34)
    at async file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/bridge/openai.js:27:34
[fallback/errorDetection] 错误类型 unknown_error 不需要触发回退
[fallback/FallbackService] 回退触发检查结果: false
[GeminiApiClient] [回退时序5] 是否需要回退: false
[rotation/RotationService] 报告API Key使用结果: key=AIzaSyAN8B..., success=false, errorType=undefined
[rotation/ApiKeyRotationManager] 报告API Key使用结果: key=AIzaSyAN8B..., success=false, errorType=undefined
[rotation/ApiKeyRotationManager] Key 1 使用失败，连续失败次数: 1
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 6,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 6,
  keysCount: 3
}
2025-07-25T04:59:24.963Z [BRIDGE-SERVER] [ERROR] false Gemini API请求失败 {
  message: 'exception TypeError: fetch failed sending request',
  stack: 'Error: exception TypeError: fetch failed sending request\n' +
    '    at file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:13059:19\n' +
    '    at async Models.generateContentStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:14308:24)\n' +
    '    at async retryWithBackoff (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/utils/retry.js:62:20)\n' +
    '    at async GeminiChat.sendMessageStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/core/geminiChat.js:303:36)\n' +
    '    at async GeminiApiClient.executeStreamRequest (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/gemini-client.js:386:34)\n' +
    '    at async file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/bridge/openai.js:27:34'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
2025-07-25T04:59:24.967Z [BRIDGE-SERVER] [ERROR] OpenAI bridge request failed {
  message: 'exception TypeError: fetch failed sending request',
  stack: 'Error: exception TypeError: fetch failed sending request\n' +
    '    at file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:13059:19\n' +
    '    at async Models.generateContentStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:14308:24)\n' +
    '    at async retryWithBackoff (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/utils/retry.js:62:20)\n' +
    '    at async GeminiChat.sendMessageStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/core/geminiChat.js:303:36)\n' +
    '    at async GeminiApiClient.executeStreamRequest (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/gemini-client.js:386:34)\n' +
    '    at async file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/bridge/openai.js:27:34'
} {
  requestId: 'e0bf7c70-c4ac-4640-baef-f75b68eb6bd4',
  durationMs: 12724
}
[rotation/ApiKeyRotationManager] Key 1 使用报告处理完成
[rotation/RotationService] API Key使用报告成功提交
2025-07-25T04:59:25.468Z [BRIDGE-SERVER] [INFO] OpenAI bridge request received {
  requestId: 'a586a0eb-ff4d-41ea-bbe0-548a91308f74',
  model: 'gemini-2.5-pro',
  stream: true
}
[GeminiApiClient] [客户端时序1] 开始初始化API Key轮换服务
[GeminiApiClient] [客户端时序2] 创建RotationService实例
[GeminiApiClient] [客户端时序3] 调用RotationService.initialize()
[rotation/RotationService] [时序1] 开始初始化轮换服务
[rotation/RotationService] [时序2] 检查多账号模式配置
[DEBUG] /rotation/ConfigLoader.ts - isMultiAccountEnabled: 检查多账号模式 {
  enabled: true,
  hasMultiAccounts: true,
  hasIndividualKeys: false,
  result: true
}
[rotation/RotationService] [时序3] 多账号模式检查结果: true
[rotation/RotationService] [时序5] 开始加载轮换配置
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 开始加载轮换配置
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 开始加载多账号配置
[DEBUG] /rotation/ConfigLoader.ts - isMultiAccountEnabled: 检查多账号模式 {
  enabled: true,
  hasMultiAccounts: true,
  hasIndividualKeys: false,
  result: true
}
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 检查GEMINI_MULTI_ACCOUNTS环境变量 { hasJson: true }
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 解析GEMINI_MULTI_ACCOUNTS JSON
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: JSON配置验证成功 { accountCount: 3 }
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 多账号配置加载完成 { hasMultiAccount: true, accountCount: 3 }
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 轮换配置构建完成 {
  strategy: 'round-robin',
  accountCount: 3,
  enableFallback: true,
  maxRequestsPerKey: undefined,
  rotationInterval: undefined
}
[rotation/RotationService] [时序6] 配置加载完成，账号数量: 3
[rotation/RotationService] [时序8] 开始初始化轮换管理器
[rotation/ApiKeyRotationManager] 开始初始化轮换管理器
[rotation/ApiKeyRotationManager] 加载持久化数据
[DEBUG] /rotation/PersistenceService.ts - loadData: 开始加载持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json'
}
[GeminiApiClient] [请求时序1] 收到sendMessageStream请求
[GeminiApiClient] [请求时序2] 检测到初始化正在进行，等待完成...
[DEBUG] /rotation/PersistenceService.ts - loadData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - loadData: 读取持久化文件内容
[DEBUG] /rotation/PersistenceService.ts - loadData: 持久化数据解析成功 { currentIndex: 0, totalRequests: 6, keysCount: 3 }
[DEBUG] /rotation/PersistenceService.ts - loadData: 释放文件锁
[rotation/ApiKeyRotationManager] 持久化数据加载结果: 成功
[rotation/ApiKeyRotationManager] 初始化API Keys
[rotation/ApiKeyRotationManager] 开始初始化API Keys
[rotation/ApiKeyRotationManager] 使用多账号配置，账号数量: 3
[rotation/ApiKeyRotationManager] 初始化第1个API Key: AIzaSyAN8B...
[rotation/ApiKeyRotationManager] 初始化第2个API Key: AIzaSyAGqu...
[rotation/ApiKeyRotationManager] 初始化第3个API Key: AIzaSyBIy5...
2025-07-25T04:59:25.471Z [BRIDGE-SERVER] [INFO] Initialized 3 API keys
[rotation/ApiKeyRotationManager] API Keys初始化完成，共3个Key
[rotation/ApiKeyRotationManager] 恢复之前保存的状态
2025-07-25T04:59:25.471Z [BRIDGE-SERVER] [INFO] Restored API key rotation state from persistence
[rotation/ApiKeyRotationManager] 验证API Keys
[rotation/ApiKeyRotationManager] 初始化完成后保存初始状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 6,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 6,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
2025-07-25T04:59:25.471Z [BRIDGE-SERVER] [INFO] API Key rotation initialized with 3 keys
[rotation/ApiKeyRotationManager] 轮换管理器初始化完成，共3个API Key
[rotation/RotationService] [时序9] 轮换管理器初始化完成，设置服务为启用状态
2025-07-25T04:59:25.471Z [BRIDGE-SERVER] [INFO] API Key rotation service initialized successfully
[rotation/RotationService] [时序10] API Key轮换服务初始化成功
[GeminiApiClient] [客户端时序4] API Key轮换服务初始化成功
[GeminiApiClient] [客户端时序5] 初始化流程完成
[GeminiApiClient] [回退时序1] 开始初始化回退管理器
[DEBUG] /rotation/ConfigLoader.ts - loadFallbackConfig: 开始加载回退模型配置
[DEBUG] /rotation/ConfigLoader.ts - loadFallbackConfig: 回退模型配置加载完成 {
  enabled: true,
  primaryModel: 'gemini-2.5-pro',
  fallbackModel: 'gemini-2.5-flash',
  maxRetries: 3
}
[fallback/FallbackManager] 回退管理器初始化
[fallback/FallbackManager] 配置: {
  enabled: true,
  primaryModel: 'gemini-2.5-pro',
  fallbackModel: 'gemini-2.5-flash'
}
[fallback/SqliteFallbackPersistence] 初始化SQLite持久化服务，数据库路径: /Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/.gemini/fallback-state.db
[fallback/SqliteFallbackPersistence] 初始化SQLite数据库连接
[fallback/SqliteFallbackPersistence] SQLite数据库初始化完成
2025-07-25T04:59:25.472Z [BRIDGE-SERVER] [INFO] SQLite fallback persistence database initialized successfully
[fallback/FallbackService] 使用SQLite持久化，数据库路径: .gemini/fallback-state.db
[fallback/FallbackService] 回退服务初始化完成
[fallback/FallbackService] 主模型: gemini-2.5-pro
[fallback/FallbackService] 回退模型: gemini-2.5-flash
[fallback/FallbackService] 启用状态: true
[fallback/SqliteFallbackPersistence] 开始加载回退状态
[fallback/SqliteFallbackPersistence] 数据库中无回退状态记录，返回null
[fallback/FallbackManager] 回退服务初始化成功
2025-07-25T04:59:25.473Z [BRIDGE-SERVER] [INFO] Fallback service initialized successfully
[GeminiApiClient] [回退时序2] 回退管理器初始化成功
2025-07-25T04:59:25.473Z [BRIDGE-SERVER] [INFO] Fallback manager initialized successfully
[GeminiApiClient] [回退时序3] 回退管理器初始化流程结束
[fallback/FallbackService] 未找到持久化状态，使用默认状态
[GeminiApiClient] [请求时序3] 初始化等待完成
[GeminiApiClient] [请求时序4] 开始获取轮换API Key
[rotation/RotationService] [API请求] 请求获取API Key，当前状态: enabled=true, manager=true, initializing=false
[rotation/RotationService] [API请求] 从轮换管理器获取下一个API Key
[rotation/ApiKeyRotationManager] 请求获取下一个API Key，当前索引: 0
[rotation/ApiKeyRotationManager] 开始轮换查找，最大尝试次数: 3
[rotation/ApiKeyRotationManager] 尝试第1次，检查索引0的Key状态: active
[rotation/ApiKeyRotationManager] Key 1/3 可用，开始使用
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 7,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 7,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
[rotation/ApiKeyRotationManager] 成功获取API Key: AIzaSyAN8B...
[rotation/RotationService] [API请求] 成功获取轮换API Key: AIzaSyAN8B...
[GeminiApiClient] [请求时序5] 成功获取轮换API Key
[GeminiApiClient] [请求时序6] 开始执行实际请求
[GeminiApiClient] [回退时序4] 当前使用模型: gemini-2.5-pro
2025-07-25T04:59:25.478Z [BRIDGE-SERVER] [INFO] Calling Gemini API { model: 'gemini-2.5-pro' }
[GeminiApiClient] [请求时序7] 使用轮换API Key创建ContentGenerator
[GeminiApiClient] [DEBUG] 动态配置详情: {
  model: 'gemini-2.5-pro',
  hasApiKey: true,
  apiKeyPrefix: 'AIzaSyAN8B...',
  authType: 'gemini-api-key'
}
[fallback/errorDetection] 检查是否应该触发回退: Error: exception TypeError: fetch failed sending request
    at file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:13059:19
    at async Models.generateContentStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:14308:24)
    at async retryWithBackoff (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/utils/retry.js:62:20)
    at async GeminiChat.sendMessageStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/core/geminiChat.js:303:36)
    at async GeminiApiClient.executeStreamRequest (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/gemini-client.js:386:34)
    at async file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/bridge/openai.js:27:34
[fallback/errorDetection] 判断错误类型: Error: exception TypeError: fetch failed sending request
    at file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:13059:19
    at async Models.generateContentStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:14308:24)
    at async retryWithBackoff (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/utils/retry.js:62:20)
    at async GeminiChat.sendMessageStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/core/geminiChat.js:303:36)
    at async GeminiApiClient.executeStreamRequest (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/gemini-client.js:386:34)
    at async file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/bridge/openai.js:27:34
[fallback/errorDetection] 检测Pro模型配额超限错误: Error: exception TypeError: fetch failed sending request
    at file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:13059:19
    at async Models.generateContentStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:14308:24)
    at async retryWithBackoff (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/utils/retry.js:62:20)
    at async GeminiChat.sendMessageStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/core/geminiChat.js:303:36)
    at async GeminiApiClient.executeStreamRequest (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/gemini-client.js:386:34)
    at async file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/bridge/openai.js:27:34
[fallback/errorDetection] 检测通用配额超限错误: Error: exception TypeError: fetch failed sending request
    at file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:13059:19
    at async Models.generateContentStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:14308:24)
    at async retryWithBackoff (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/utils/retry.js:62:20)
    at async GeminiChat.sendMessageStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/core/geminiChat.js:303:36)
    at async GeminiApiClient.executeStreamRequest (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/gemini-client.js:386:34)
    at async file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/bridge/openai.js:27:34
[fallback/errorDetection] 检测Pro模型配额超限错误: Error: exception TypeError: fetch failed sending request
    at file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:13059:19
    at async Models.generateContentStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:14308:24)
    at async retryWithBackoff (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/utils/retry.js:62:20)
    at async GeminiChat.sendMessageStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/core/geminiChat.js:303:36)
    at async GeminiApiClient.executeStreamRequest (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/gemini-client.js:386:34)
    at async file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/bridge/openai.js:27:34
[fallback/errorDetection] 检测配额超限错误: Error: exception TypeError: fetch failed sending request
    at file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:13059:19
    at async Models.generateContentStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:14308:24)
    at async retryWithBackoff (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/utils/retry.js:62:20)
    at async GeminiChat.sendMessageStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/core/geminiChat.js:303:36)
    at async GeminiApiClient.executeStreamRequest (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/gemini-client.js:386:34)
    at async file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/bridge/openai.js:27:34
[fallback/errorDetection] 检测限速错误: Error: exception TypeError: fetch failed sending request
    at file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:13059:19
    at async Models.generateContentStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:14308:24)
    at async retryWithBackoff (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/utils/retry.js:62:20)
    at async GeminiChat.sendMessageStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/core/geminiChat.js:303:36)
    at async GeminiApiClient.executeStreamRequest (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/gemini-client.js:386:34)
    at async file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/bridge/openai.js:27:34
[fallback/errorDetection] 检测服务器错误: Error: exception TypeError: fetch failed sending request
    at file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:13059:19
    at async Models.generateContentStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:14308:24)
    at async retryWithBackoff (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/utils/retry.js:62:20)
    at async GeminiChat.sendMessageStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/core/geminiChat.js:303:36)
    at async GeminiApiClient.executeStreamRequest (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/gemini-client.js:386:34)
    at async file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/bridge/openai.js:27:34
[fallback/errorDetection] 错误类型 unknown_error 不需要触发回退
[fallback/FallbackService] 回退触发检查结果: false
[GeminiApiClient] [回退时序5] 是否需要回退: false
[rotation/RotationService] 报告API Key使用结果: key=AIzaSyAN8B..., success=false, errorType=undefined
[rotation/ApiKeyRotationManager] 报告API Key使用结果: key=AIzaSyAN8B..., success=false, errorType=undefined
[rotation/ApiKeyRotationManager] Key 1 使用失败，连续失败次数: 2
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 7,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 7,
  keysCount: 3
}
2025-07-25T04:59:39.445Z [BRIDGE-SERVER] [ERROR] false Gemini API请求失败 {
  message: 'exception TypeError: fetch failed sending request',
  stack: 'Error: exception TypeError: fetch failed sending request\n' +
    '    at file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:13059:19\n' +
    '    at async Models.generateContentStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:14308:24)\n' +
    '    at async retryWithBackoff (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/utils/retry.js:62:20)\n' +
    '    at async GeminiChat.sendMessageStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/core/geminiChat.js:303:36)\n' +
    '    at async GeminiApiClient.executeStreamRequest (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/gemini-client.js:386:34)\n' +
    '    at async file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/bridge/openai.js:27:34'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
2025-07-25T04:59:39.446Z [BRIDGE-SERVER] [ERROR] OpenAI bridge request failed {
  message: 'exception TypeError: fetch failed sending request',
  stack: 'Error: exception TypeError: fetch failed sending request\n' +
    '    at file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:13059:19\n' +
    '    at async Models.generateContentStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/node_modules/@google/genai/dist/node/index.mjs:14308:24)\n' +
    '    at async retryWithBackoff (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/utils/retry.js:62:20)\n' +
    '    at async GeminiChat.sendMessageStream (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/core/dist/src/core/geminiChat.js:303:36)\n' +
    '    at async GeminiApiClient.executeStreamRequest (file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/gemini-client.js:386:34)\n' +
    '    at async file:///Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/dist/bridge/openai.js:27:34'
} {
  requestId: 'a586a0eb-ff4d-41ea-bbe0-548a91308f74',
  durationMs: 13978
}
[rotation/ApiKeyRotationManager] Key 1 使用报告处理完成
[rotation/RotationService] API Key使用报告成功提交
2025-07-25T04:59:40.422Z [BRIDGE-SERVER] [INFO] OpenAI bridge request received {
  requestId: '127deb09-119b-4d7c-9a65-dbb112305420',
  model: 'gemini-2.5-pro',
  stream: true
}
[GeminiApiClient] [客户端时序1] 开始初始化API Key轮换服务
[GeminiApiClient] [客户端时序2] 创建RotationService实例
[GeminiApiClient] [客户端时序3] 调用RotationService.initialize()
[rotation/RotationService] [时序1] 开始初始化轮换服务
[rotation/RotationService] [时序2] 检查多账号模式配置
[DEBUG] /rotation/ConfigLoader.ts - isMultiAccountEnabled: 检查多账号模式 {
  enabled: true,
  hasMultiAccounts: true,
  hasIndividualKeys: false,
  result: true
}
[rotation/RotationService] [时序3] 多账号模式检查结果: true
[rotation/RotationService] [时序5] 开始加载轮换配置
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 开始加载轮换配置
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 开始加载多账号配置
[DEBUG] /rotation/ConfigLoader.ts - isMultiAccountEnabled: 检查多账号模式 {
  enabled: true,
  hasMultiAccounts: true,
  hasIndividualKeys: false,
  result: true
}
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 检查GEMINI_MULTI_ACCOUNTS环境变量 { hasJson: true }
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 解析GEMINI_MULTI_ACCOUNTS JSON
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: JSON配置验证成功 { accountCount: 3 }
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 多账号配置加载完成 { hasMultiAccount: true, accountCount: 3 }
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 轮换配置构建完成 {
  strategy: 'round-robin',
  accountCount: 3,
  enableFallback: true,
  maxRequestsPerKey: undefined,
  rotationInterval: undefined
}
[rotation/RotationService] [时序6] 配置加载完成，账号数量: 3
[rotation/RotationService] [时序8] 开始初始化轮换管理器
[rotation/ApiKeyRotationManager] 开始初始化轮换管理器
[rotation/ApiKeyRotationManager] 加载持久化数据
[DEBUG] /rotation/PersistenceService.ts - loadData: 开始加载持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json'
}
[GeminiApiClient] [请求时序1] 收到sendMessageStream请求
[GeminiApiClient] [请求时序2] 检测到初始化正在进行，等待完成...
[DEBUG] /rotation/PersistenceService.ts - loadData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - loadData: 读取持久化文件内容
[DEBUG] /rotation/PersistenceService.ts - loadData: 持久化数据解析成功 { currentIndex: 0, totalRequests: 7, keysCount: 3 }
[DEBUG] /rotation/PersistenceService.ts - loadData: 释放文件锁
[rotation/ApiKeyRotationManager] 持久化数据加载结果: 成功
[rotation/ApiKeyRotationManager] 初始化API Keys
[rotation/ApiKeyRotationManager] 开始初始化API Keys
[rotation/ApiKeyRotationManager] 使用多账号配置，账号数量: 3
[rotation/ApiKeyRotationManager] 初始化第1个API Key: AIzaSyAN8B...
[rotation/ApiKeyRotationManager] 初始化第2个API Key: AIzaSyAGqu...
[rotation/ApiKeyRotationManager] 初始化第3个API Key: AIzaSyBIy5...
2025-07-25T04:59:40.426Z [BRIDGE-SERVER] [INFO] Initialized 3 API keys
[rotation/ApiKeyRotationManager] API Keys初始化完成，共3个Key
[rotation/ApiKeyRotationManager] 恢复之前保存的状态
2025-07-25T04:59:40.426Z [BRIDGE-SERVER] [INFO] Restored API key rotation state from persistence
[rotation/ApiKeyRotationManager] 验证API Keys
[rotation/ApiKeyRotationManager] 初始化完成后保存初始状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 7,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 7,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
2025-07-25T04:59:40.427Z [BRIDGE-SERVER] [INFO] API Key rotation initialized with 3 keys
[rotation/ApiKeyRotationManager] 轮换管理器初始化完成，共3个API Key
[rotation/RotationService] [时序9] 轮换管理器初始化完成，设置服务为启用状态
2025-07-25T04:59:40.427Z [BRIDGE-SERVER] [INFO] API Key rotation service initialized successfully
[rotation/RotationService] [时序10] API Key轮换服务初始化成功
[GeminiApiClient] [客户端时序4] API Key轮换服务初始化成功
[GeminiApiClient] [客户端时序5] 初始化流程完成
[GeminiApiClient] [回退时序1] 开始初始化回退管理器
[DEBUG] /rotation/ConfigLoader.ts - loadFallbackConfig: 开始加载回退模型配置
[DEBUG] /rotation/ConfigLoader.ts - loadFallbackConfig: 回退模型配置加载完成 {
  enabled: true,
  primaryModel: 'gemini-2.5-pro',
  fallbackModel: 'gemini-2.5-flash',
  maxRetries: 3
}
[fallback/FallbackManager] 回退管理器初始化
[fallback/FallbackManager] 配置: {
  enabled: true,
  primaryModel: 'gemini-2.5-pro',
  fallbackModel: 'gemini-2.5-flash'
}
[fallback/SqliteFallbackPersistence] 初始化SQLite持久化服务，数据库路径: /Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/.gemini/fallback-state.db
[fallback/SqliteFallbackPersistence] 初始化SQLite数据库连接
[fallback/SqliteFallbackPersistence] SQLite数据库初始化完成
2025-07-25T04:59:40.429Z [BRIDGE-SERVER] [INFO] SQLite fallback persistence database initialized successfully
[fallback/FallbackService] 使用SQLite持久化，数据库路径: .gemini/fallback-state.db
[fallback/FallbackService] 回退服务初始化完成
[fallback/FallbackService] 主模型: gemini-2.5-pro
[fallback/FallbackService] 回退模型: gemini-2.5-flash
[fallback/FallbackService] 启用状态: true
[fallback/SqliteFallbackPersistence] 开始加载回退状态
[fallback/SqliteFallbackPersistence] 数据库中无回退状态记录，返回null
[fallback/FallbackManager] 回退服务初始化成功
2025-07-25T04:59:40.429Z [BRIDGE-SERVER] [INFO] Fallback service initialized successfully
[GeminiApiClient] [回退时序2] 回退管理器初始化成功
2025-07-25T04:59:40.429Z [BRIDGE-SERVER] [INFO] Fallback manager initialized successfully
[GeminiApiClient] [回退时序3] 回退管理器初始化流程结束
[fallback/FallbackService] 未找到持久化状态，使用默认状态
[GeminiApiClient] [请求时序3] 初始化等待完成
[GeminiApiClient] [请求时序4] 开始获取轮换API Key
[rotation/RotationService] [API请求] 请求获取API Key，当前状态: enabled=true, manager=true, initializing=false
[rotation/RotationService] [API请求] 从轮换管理器获取下一个API Key
[rotation/ApiKeyRotationManager] 请求获取下一个API Key，当前索引: 0
[rotation/ApiKeyRotationManager] 开始轮换查找，最大尝试次数: 3
[rotation/ApiKeyRotationManager] 尝试第1次，检查索引0的Key状态: active
[rotation/ApiKeyRotationManager] Key 1/3 可用，开始使用
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 8,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 8,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
[rotation/ApiKeyRotationManager] 成功获取API Key: AIzaSyAN8B...
[rotation/RotationService] [API请求] 成功获取轮换API Key: AIzaSyAN8B...
[GeminiApiClient] [请求时序5] 成功获取轮换API Key
[GeminiApiClient] [请求时序6] 开始执行实际请求
[GeminiApiClient] [回退时序4] 当前使用模型: gemini-2.5-pro
2025-07-25T04:59:40.431Z [BRIDGE-SERVER] [INFO] Calling Gemini API { model: 'gemini-2.5-pro' }
[GeminiApiClient] [请求时序7] 使用轮换API Key创建ContentGenerator
[GeminiApiClient] [DEBUG] 动态配置详情: {
  model: 'gemini-2.5-pro',
  hasApiKey: true,
  apiKeyPrefix: 'AIzaSyAN8B...',
  authType: 'gemini-api-key'
}
[rotation/RotationService] 报告API Key使用结果: key=AIzaSyAN8B..., success=true, errorType=undefined
[rotation/ApiKeyRotationManager] 报告API Key使用结果: key=AIzaSyAN8B..., success=true, errorType=undefined
[rotation/ApiKeyRotationManager] Key 1 使用成功，更新统计信息
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 8,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 8,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
[rotation/ApiKeyRotationManager] Key 1 使用报告处理完成
[rotation/RotationService] API Key使用报告成功提交
2025-07-25T05:00:13.935Z [BRIDGE-SERVER] [INFO] OpenAI bridge request received {
  requestId: 'ea2b8178-b502-43a2-b557-331ae90095a0',
  model: 'gemini-2.5-pro',
  stream: true
}
[GeminiApiClient] [客户端时序1] 开始初始化API Key轮换服务
[GeminiApiClient] [客户端时序2] 创建RotationService实例
[GeminiApiClient] [客户端时序3] 调用RotationService.initialize()
[rotation/RotationService] [时序1] 开始初始化轮换服务
[rotation/RotationService] [时序2] 检查多账号模式配置
[DEBUG] /rotation/ConfigLoader.ts - isMultiAccountEnabled: 检查多账号模式 {
  enabled: true,
  hasMultiAccounts: true,
  hasIndividualKeys: false,
  result: true
}
[rotation/RotationService] [时序3] 多账号模式检查结果: true
[rotation/RotationService] [时序5] 开始加载轮换配置
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 开始加载轮换配置
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 开始加载多账号配置
[DEBUG] /rotation/ConfigLoader.ts - isMultiAccountEnabled: 检查多账号模式 {
  enabled: true,
  hasMultiAccounts: true,
  hasIndividualKeys: false,
  result: true
}
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 检查GEMINI_MULTI_ACCOUNTS环境变量 { hasJson: true }
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 解析GEMINI_MULTI_ACCOUNTS JSON
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: JSON配置验证成功 { accountCount: 3 }
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 多账号配置加载完成 { hasMultiAccount: true, accountCount: 3 }
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 轮换配置构建完成 {
  strategy: 'round-robin',
  accountCount: 3,
  enableFallback: true,
  maxRequestsPerKey: undefined,
  rotationInterval: undefined
}
[rotation/RotationService] [时序6] 配置加载完成，账号数量: 3
[rotation/RotationService] [时序8] 开始初始化轮换管理器
[rotation/ApiKeyRotationManager] 开始初始化轮换管理器
[rotation/ApiKeyRotationManager] 加载持久化数据
[DEBUG] /rotation/PersistenceService.ts - loadData: 开始加载持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json'
}
[GeminiApiClient] [请求时序1] 收到sendMessageStream请求
[GeminiApiClient] [请求时序2] 检测到初始化正在进行，等待完成...
[DEBUG] /rotation/PersistenceService.ts - loadData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - loadData: 读取持久化文件内容
[DEBUG] /rotation/PersistenceService.ts - loadData: 持久化数据解析成功 { currentIndex: 0, totalRequests: 8, keysCount: 3 }
[DEBUG] /rotation/PersistenceService.ts - loadData: 释放文件锁
[rotation/ApiKeyRotationManager] 持久化数据加载结果: 成功
[rotation/ApiKeyRotationManager] 初始化API Keys
[rotation/ApiKeyRotationManager] 开始初始化API Keys
[rotation/ApiKeyRotationManager] 使用多账号配置，账号数量: 3
[rotation/ApiKeyRotationManager] 初始化第1个API Key: AIzaSyAN8B...
[rotation/ApiKeyRotationManager] 初始化第2个API Key: AIzaSyAGqu...
[rotation/ApiKeyRotationManager] 初始化第3个API Key: AIzaSyBIy5...
2025-07-25T05:00:13.940Z [BRIDGE-SERVER] [INFO] Initialized 3 API keys
[rotation/ApiKeyRotationManager] API Keys初始化完成，共3个Key
[rotation/ApiKeyRotationManager] 恢复之前保存的状态
2025-07-25T05:00:13.940Z [BRIDGE-SERVER] [INFO] Restored API key rotation state from persistence
[rotation/ApiKeyRotationManager] 验证API Keys
[rotation/ApiKeyRotationManager] 初始化完成后保存初始状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 8,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 8,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
2025-07-25T05:00:13.942Z [BRIDGE-SERVER] [INFO] API Key rotation initialized with 3 keys
[rotation/ApiKeyRotationManager] 轮换管理器初始化完成，共3个API Key
[rotation/RotationService] [时序9] 轮换管理器初始化完成，设置服务为启用状态
2025-07-25T05:00:13.942Z [BRIDGE-SERVER] [INFO] API Key rotation service initialized successfully
[rotation/RotationService] [时序10] API Key轮换服务初始化成功
[GeminiApiClient] [客户端时序4] API Key轮换服务初始化成功
[GeminiApiClient] [客户端时序5] 初始化流程完成
[GeminiApiClient] [回退时序1] 开始初始化回退管理器
[DEBUG] /rotation/ConfigLoader.ts - loadFallbackConfig: 开始加载回退模型配置
[DEBUG] /rotation/ConfigLoader.ts - loadFallbackConfig: 回退模型配置加载完成 {
  enabled: true,
  primaryModel: 'gemini-2.5-pro',
  fallbackModel: 'gemini-2.5-flash',
  maxRetries: 3
}
[fallback/FallbackManager] 回退管理器初始化
[fallback/FallbackManager] 配置: {
  enabled: true,
  primaryModel: 'gemini-2.5-pro',
  fallbackModel: 'gemini-2.5-flash'
}
[fallback/SqliteFallbackPersistence] 初始化SQLite持久化服务，数据库路径: /Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/.gemini/fallback-state.db
[fallback/SqliteFallbackPersistence] 初始化SQLite数据库连接
[fallback/SqliteFallbackPersistence] SQLite数据库初始化完成
2025-07-25T05:00:13.945Z [BRIDGE-SERVER] [INFO] SQLite fallback persistence database initialized successfully
[fallback/FallbackService] 使用SQLite持久化，数据库路径: .gemini/fallback-state.db
[fallback/FallbackService] 回退服务初始化完成
[fallback/FallbackService] 主模型: gemini-2.5-pro
[fallback/FallbackService] 回退模型: gemini-2.5-flash
[fallback/FallbackService] 启用状态: true
[fallback/SqliteFallbackPersistence] 开始加载回退状态
[fallback/SqliteFallbackPersistence] 数据库中无回退状态记录，返回null
[fallback/FallbackManager] 回退服务初始化成功
2025-07-25T05:00:13.945Z [BRIDGE-SERVER] [INFO] Fallback service initialized successfully
[GeminiApiClient] [回退时序2] 回退管理器初始化成功
2025-07-25T05:00:13.945Z [BRIDGE-SERVER] [INFO] Fallback manager initialized successfully
[GeminiApiClient] [回退时序3] 回退管理器初始化流程结束
[fallback/FallbackService] 未找到持久化状态，使用默认状态
[GeminiApiClient] [请求时序3] 初始化等待完成
[GeminiApiClient] [请求时序4] 开始获取轮换API Key
[rotation/RotationService] [API请求] 请求获取API Key，当前状态: enabled=true, manager=true, initializing=false
[rotation/RotationService] [API请求] 从轮换管理器获取下一个API Key
[rotation/ApiKeyRotationManager] 请求获取下一个API Key，当前索引: 0
[rotation/ApiKeyRotationManager] 开始轮换查找，最大尝试次数: 3
[rotation/ApiKeyRotationManager] 尝试第1次，检查索引0的Key状态: active
[rotation/ApiKeyRotationManager] Key 1/3 可用，开始使用
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 9,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 9,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
[rotation/ApiKeyRotationManager] 成功获取API Key: AIzaSyAN8B...
[rotation/RotationService] [API请求] 成功获取轮换API Key: AIzaSyAN8B...
[GeminiApiClient] [请求时序5] 成功获取轮换API Key
[GeminiApiClient] [请求时序6] 开始执行实际请求
[GeminiApiClient] [回退时序4] 当前使用模型: gemini-2.5-pro
2025-07-25T05:00:13.947Z [BRIDGE-SERVER] [INFO] Calling Gemini API { model: 'gemini-2.5-pro' }
[GeminiApiClient] [请求时序7] 使用轮换API Key创建ContentGenerator
[GeminiApiClient] [DEBUG] 动态配置详情: {
  model: 'gemini-2.5-pro',
  hasApiKey: true,
  apiKeyPrefix: 'AIzaSyAN8B...',
  authType: 'gemini-api-key'
}
2025-07-25T05:00:18.743Z [BRIDGE-SERVER] [INFO] OpenAI bridge request finished {
  requestId: '127deb09-119b-4d7c-9a65-dbb112305420',
  status: 'success',
  durationMs: 38321
}
[rotation/RotationService] 报告API Key使用结果: key=AIzaSyAN8B..., success=true, errorType=undefined
[rotation/ApiKeyRotationManager] 报告API Key使用结果: key=AIzaSyAN8B..., success=true, errorType=undefined
[rotation/ApiKeyRotationManager] Key 1 使用成功，更新统计信息
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 9,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 9,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
[rotation/ApiKeyRotationManager] Key 1 使用报告处理完成
[rotation/RotationService] API Key使用报告成功提交
Error flushing log events: Error: Client network socket disconnected before secure TLS connection was established
    at TLSSocket.onConnectEnd (node:_tls_wrap:1732:19)
    at TLSSocket.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21) {
  code: 'ECONNRESET',
  path: undefined,
  host: undefined,
  port: undefined,
  localAddress: undefined
}
Error flushing log events: Error: Client network socket disconnected before secure TLS connection was established
    at TLSSocket.onConnectEnd (node:_tls_wrap:1732:19)
    at TLSSocket.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21) {
  code: 'ECONNRESET',
  path: undefined,
  host: undefined,
  port: undefined,
  localAddress: undefined
}
2025-07-25T05:00:36.256Z [BRIDGE-SERVER] [INFO] OpenAI bridge request finished {
  requestId: 'ea2b8178-b502-43a2-b557-331ae90095a0',
  status: 'success',
  durationMs: 22321
}
2025-07-25T05:01:36.594Z [BRIDGE-SERVER] [INFO] OpenAI bridge request received {
  requestId: '12a73f43-0155-4c43-8652-0d2896ec8ae2',
  model: 'gemini-2.5-pro',
  stream: true
}
[GeminiApiClient] [客户端时序1] 开始初始化API Key轮换服务
[GeminiApiClient] [客户端时序2] 创建RotationService实例
[GeminiApiClient] [客户端时序3] 调用RotationService.initialize()
[rotation/RotationService] [时序1] 开始初始化轮换服务
[rotation/RotationService] [时序2] 检查多账号模式配置
[DEBUG] /rotation/ConfigLoader.ts - isMultiAccountEnabled: 检查多账号模式 {
  enabled: true,
  hasMultiAccounts: true,
  hasIndividualKeys: false,
  result: true
}
[rotation/RotationService] [时序3] 多账号模式检查结果: true
[rotation/RotationService] [时序5] 开始加载轮换配置
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 开始加载轮换配置
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 开始加载多账号配置
[DEBUG] /rotation/ConfigLoader.ts - isMultiAccountEnabled: 检查多账号模式 {
  enabled: true,
  hasMultiAccounts: true,
  hasIndividualKeys: false,
  result: true
}
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 检查GEMINI_MULTI_ACCOUNTS环境变量 { hasJson: true }
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 解析GEMINI_MULTI_ACCOUNTS JSON
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: JSON配置验证成功 { accountCount: 3 }
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 多账号配置加载完成 { hasMultiAccount: true, accountCount: 3 }
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 轮换配置构建完成 {
  strategy: 'round-robin',
  accountCount: 3,
  enableFallback: true,
  maxRequestsPerKey: undefined,
  rotationInterval: undefined
}
[rotation/RotationService] [时序6] 配置加载完成，账号数量: 3
[rotation/RotationService] [时序8] 开始初始化轮换管理器
[rotation/ApiKeyRotationManager] 开始初始化轮换管理器
[rotation/ApiKeyRotationManager] 加载持久化数据
[DEBUG] /rotation/PersistenceService.ts - loadData: 开始加载持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json'
}
[GeminiApiClient] [请求时序1] 收到sendMessageStream请求
[GeminiApiClient] [请求时序2] 检测到初始化正在进行，等待完成...
[DEBUG] /rotation/PersistenceService.ts - loadData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - loadData: 读取持久化文件内容
[DEBUG] /rotation/PersistenceService.ts - loadData: 持久化数据解析成功 { currentIndex: 0, totalRequests: 9, keysCount: 3 }
[DEBUG] /rotation/PersistenceService.ts - loadData: 释放文件锁
[rotation/ApiKeyRotationManager] 持久化数据加载结果: 成功
[rotation/ApiKeyRotationManager] 初始化API Keys
[rotation/ApiKeyRotationManager] 开始初始化API Keys
[rotation/ApiKeyRotationManager] 使用多账号配置，账号数量: 3
[rotation/ApiKeyRotationManager] 初始化第1个API Key: AIzaSyAN8B...
[rotation/ApiKeyRotationManager] 初始化第2个API Key: AIzaSyAGqu...
[rotation/ApiKeyRotationManager] 初始化第3个API Key: AIzaSyBIy5...
2025-07-25T05:01:36.599Z [BRIDGE-SERVER] [INFO] Initialized 3 API keys
[rotation/ApiKeyRotationManager] API Keys初始化完成，共3个Key
[rotation/ApiKeyRotationManager] 恢复之前保存的状态
2025-07-25T05:01:36.599Z [BRIDGE-SERVER] [INFO] Restored API key rotation state from persistence
[rotation/ApiKeyRotationManager] 验证API Keys
[rotation/ApiKeyRotationManager] 初始化完成后保存初始状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 9,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 9,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
2025-07-25T05:01:36.600Z [BRIDGE-SERVER] [INFO] API Key rotation initialized with 3 keys
[rotation/ApiKeyRotationManager] 轮换管理器初始化完成，共3个API Key
[rotation/RotationService] [时序9] 轮换管理器初始化完成，设置服务为启用状态
2025-07-25T05:01:36.600Z [BRIDGE-SERVER] [INFO] API Key rotation service initialized successfully
[rotation/RotationService] [时序10] API Key轮换服务初始化成功
[GeminiApiClient] [客户端时序4] API Key轮换服务初始化成功
[GeminiApiClient] [客户端时序5] 初始化流程完成
[GeminiApiClient] [回退时序1] 开始初始化回退管理器
[DEBUG] /rotation/ConfigLoader.ts - loadFallbackConfig: 开始加载回退模型配置
[DEBUG] /rotation/ConfigLoader.ts - loadFallbackConfig: 回退模型配置加载完成 {
  enabled: true,
  primaryModel: 'gemini-2.5-pro',
  fallbackModel: 'gemini-2.5-flash',
  maxRetries: 3
}
[fallback/FallbackManager] 回退管理器初始化
[fallback/FallbackManager] 配置: {
  enabled: true,
  primaryModel: 'gemini-2.5-pro',
  fallbackModel: 'gemini-2.5-flash'
}
[fallback/SqliteFallbackPersistence] 初始化SQLite持久化服务，数据库路径: /Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/.gemini/fallback-state.db
[fallback/SqliteFallbackPersistence] 初始化SQLite数据库连接
[fallback/SqliteFallbackPersistence] SQLite数据库初始化完成
2025-07-25T05:01:36.605Z [BRIDGE-SERVER] [INFO] SQLite fallback persistence database initialized successfully
[fallback/FallbackService] 使用SQLite持久化，数据库路径: .gemini/fallback-state.db
[fallback/FallbackService] 回退服务初始化完成
[fallback/FallbackService] 主模型: gemini-2.5-pro
[fallback/FallbackService] 回退模型: gemini-2.5-flash
[fallback/FallbackService] 启用状态: true
[fallback/SqliteFallbackPersistence] 开始加载回退状态
[fallback/SqliteFallbackPersistence] 数据库中无回退状态记录，返回null
[fallback/FallbackManager] 回退服务初始化成功
2025-07-25T05:01:36.606Z [BRIDGE-SERVER] [INFO] Fallback service initialized successfully
[GeminiApiClient] [回退时序2] 回退管理器初始化成功
2025-07-25T05:01:36.606Z [BRIDGE-SERVER] [INFO] Fallback manager initialized successfully
[GeminiApiClient] [回退时序3] 回退管理器初始化流程结束
[fallback/FallbackService] 未找到持久化状态，使用默认状态
[GeminiApiClient] [请求时序3] 初始化等待完成
[GeminiApiClient] [请求时序4] 开始获取轮换API Key
[rotation/RotationService] [API请求] 请求获取API Key，当前状态: enabled=true, manager=true, initializing=false
[rotation/RotationService] [API请求] 从轮换管理器获取下一个API Key
[rotation/ApiKeyRotationManager] 请求获取下一个API Key，当前索引: 0
[rotation/ApiKeyRotationManager] 开始轮换查找，最大尝试次数: 3
[rotation/ApiKeyRotationManager] 尝试第1次，检查索引0的Key状态: active
[rotation/ApiKeyRotationManager] Key 1/3 可用，开始使用
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 10,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 10,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
[rotation/ApiKeyRotationManager] 成功获取API Key: AIzaSyAN8B...
[rotation/RotationService] [API请求] 成功获取轮换API Key: AIzaSyAN8B...
[GeminiApiClient] [请求时序5] 成功获取轮换API Key
[GeminiApiClient] [请求时序6] 开始执行实际请求
[GeminiApiClient] [回退时序4] 当前使用模型: gemini-2.5-pro
2025-07-25T05:01:36.608Z [BRIDGE-SERVER] [INFO] Calling Gemini API { model: 'gemini-2.5-pro' }
[GeminiApiClient] [请求时序7] 使用轮换API Key创建ContentGenerator
[GeminiApiClient] [DEBUG] 动态配置详情: {
  model: 'gemini-2.5-pro',
  hasApiKey: true,
  apiKeyPrefix: 'AIzaSyAN8B...',
  authType: 'gemini-api-key'
}
[rotation/RotationService] 报告API Key使用结果: key=AIzaSyAN8B..., success=true, errorType=undefined
[rotation/ApiKeyRotationManager] 报告API Key使用结果: key=AIzaSyAN8B..., success=true, errorType=undefined
[rotation/ApiKeyRotationManager] Key 1 使用成功，更新统计信息
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 10,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 10,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
[rotation/ApiKeyRotationManager] Key 1 使用报告处理完成
[rotation/RotationService] API Key使用报告成功提交
2025-07-25T05:01:42.717Z [BRIDGE-SERVER] [INFO] OpenAI bridge request received {
  requestId: 'b660e6b4-3722-44cd-8941-38ba5e889b85',
  model: 'gemini-2.5-pro',
  stream: true
}
[GeminiApiClient] [客户端时序1] 开始初始化API Key轮换服务
[GeminiApiClient] [客户端时序2] 创建RotationService实例
[GeminiApiClient] [客户端时序3] 调用RotationService.initialize()
[rotation/RotationService] [时序1] 开始初始化轮换服务
[rotation/RotationService] [时序2] 检查多账号模式配置
[DEBUG] /rotation/ConfigLoader.ts - isMultiAccountEnabled: 检查多账号模式 {
  enabled: true,
  hasMultiAccounts: true,
  hasIndividualKeys: false,
  result: true
}
[rotation/RotationService] [时序3] 多账号模式检查结果: true
[rotation/RotationService] [时序5] 开始加载轮换配置
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 开始加载轮换配置
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 开始加载多账号配置
[DEBUG] /rotation/ConfigLoader.ts - isMultiAccountEnabled: 检查多账号模式 {
  enabled: true,
  hasMultiAccounts: true,
  hasIndividualKeys: false,
  result: true
}
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 检查GEMINI_MULTI_ACCOUNTS环境变量 { hasJson: true }
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 解析GEMINI_MULTI_ACCOUNTS JSON
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: JSON配置验证成功 { accountCount: 3 }
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 多账号配置加载完成 { hasMultiAccount: true, accountCount: 3 }
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 轮换配置构建完成 {
  strategy: 'round-robin',
  accountCount: 3,
  enableFallback: true,
  maxRequestsPerKey: undefined,
  rotationInterval: undefined
}
[rotation/RotationService] [时序6] 配置加载完成，账号数量: 3
[rotation/RotationService] [时序8] 开始初始化轮换管理器
[rotation/ApiKeyRotationManager] 开始初始化轮换管理器
[rotation/ApiKeyRotationManager] 加载持久化数据
[DEBUG] /rotation/PersistenceService.ts - loadData: 开始加载持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json'
}
[GeminiApiClient] [请求时序1] 收到sendMessageStream请求
[GeminiApiClient] [请求时序2] 检测到初始化正在进行，等待完成...
[DEBUG] /rotation/PersistenceService.ts - loadData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - loadData: 读取持久化文件内容
[DEBUG] /rotation/PersistenceService.ts - loadData: 持久化数据解析成功 { currentIndex: 0, totalRequests: 10, keysCount: 3 }
[DEBUG] /rotation/PersistenceService.ts - loadData: 释放文件锁
[rotation/ApiKeyRotationManager] 持久化数据加载结果: 成功
[rotation/ApiKeyRotationManager] 初始化API Keys
[rotation/ApiKeyRotationManager] 开始初始化API Keys
[rotation/ApiKeyRotationManager] 使用多账号配置，账号数量: 3
[rotation/ApiKeyRotationManager] 初始化第1个API Key: AIzaSyAN8B...
[rotation/ApiKeyRotationManager] 初始化第2个API Key: AIzaSyAGqu...
[rotation/ApiKeyRotationManager] 初始化第3个API Key: AIzaSyBIy5...
2025-07-25T05:01:42.721Z [BRIDGE-SERVER] [INFO] Initialized 3 API keys
[rotation/ApiKeyRotationManager] API Keys初始化完成，共3个Key
[rotation/ApiKeyRotationManager] 恢复之前保存的状态
2025-07-25T05:01:42.721Z [BRIDGE-SERVER] [INFO] Restored API key rotation state from persistence
[rotation/ApiKeyRotationManager] 验证API Keys
[rotation/ApiKeyRotationManager] 初始化完成后保存初始状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 10,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 10,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
2025-07-25T05:01:42.724Z [BRIDGE-SERVER] [INFO] API Key rotation initialized with 3 keys
[rotation/ApiKeyRotationManager] 轮换管理器初始化完成，共3个API Key
[rotation/RotationService] [时序9] 轮换管理器初始化完成，设置服务为启用状态
2025-07-25T05:01:42.725Z [BRIDGE-SERVER] [INFO] API Key rotation service initialized successfully
[rotation/RotationService] [时序10] API Key轮换服务初始化成功
[GeminiApiClient] [客户端时序4] API Key轮换服务初始化成功
[GeminiApiClient] [客户端时序5] 初始化流程完成
[GeminiApiClient] [回退时序1] 开始初始化回退管理器
[DEBUG] /rotation/ConfigLoader.ts - loadFallbackConfig: 开始加载回退模型配置
[DEBUG] /rotation/ConfigLoader.ts - loadFallbackConfig: 回退模型配置加载完成 {
  enabled: true,
  primaryModel: 'gemini-2.5-pro',
  fallbackModel: 'gemini-2.5-flash',
  maxRetries: 3
}
[fallback/FallbackManager] 回退管理器初始化
[fallback/FallbackManager] 配置: {
  enabled: true,
  primaryModel: 'gemini-2.5-pro',
  fallbackModel: 'gemini-2.5-flash'
}
[fallback/SqliteFallbackPersistence] 初始化SQLite持久化服务，数据库路径: /Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/.gemini/fallback-state.db
[fallback/SqliteFallbackPersistence] 初始化SQLite数据库连接
[fallback/SqliteFallbackPersistence] SQLite数据库初始化完成
2025-07-25T05:01:42.725Z [BRIDGE-SERVER] [INFO] SQLite fallback persistence database initialized successfully
[fallback/FallbackService] 使用SQLite持久化，数据库路径: .gemini/fallback-state.db
[fallback/FallbackService] 回退服务初始化完成
[fallback/FallbackService] 主模型: gemini-2.5-pro
[fallback/FallbackService] 回退模型: gemini-2.5-flash
[fallback/FallbackService] 启用状态: true
[fallback/SqliteFallbackPersistence] 开始加载回退状态
[fallback/SqliteFallbackPersistence] 数据库中无回退状态记录，返回null
[fallback/FallbackManager] 回退服务初始化成功
2025-07-25T05:01:42.726Z [BRIDGE-SERVER] [INFO] Fallback service initialized successfully
[GeminiApiClient] [回退时序2] 回退管理器初始化成功
2025-07-25T05:01:42.726Z [BRIDGE-SERVER] [INFO] Fallback manager initialized successfully
[GeminiApiClient] [回退时序3] 回退管理器初始化流程结束
[fallback/FallbackService] 未找到持久化状态，使用默认状态
[GeminiApiClient] [请求时序3] 初始化等待完成
[GeminiApiClient] [请求时序4] 开始获取轮换API Key
[rotation/RotationService] [API请求] 请求获取API Key，当前状态: enabled=true, manager=true, initializing=false
[rotation/RotationService] [API请求] 从轮换管理器获取下一个API Key
[rotation/ApiKeyRotationManager] 请求获取下一个API Key，当前索引: 0
[rotation/ApiKeyRotationManager] 开始轮换查找，最大尝试次数: 3
[rotation/ApiKeyRotationManager] 尝试第1次，检查索引0的Key状态: active
[rotation/ApiKeyRotationManager] Key 1/3 可用，开始使用
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 11,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 11,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
[rotation/ApiKeyRotationManager] 成功获取API Key: AIzaSyAN8B...
[rotation/RotationService] [API请求] 成功获取轮换API Key: AIzaSyAN8B...
[GeminiApiClient] [请求时序5] 成功获取轮换API Key
[GeminiApiClient] [请求时序6] 开始执行实际请求
[GeminiApiClient] [回退时序4] 当前使用模型: gemini-2.5-pro
2025-07-25T05:01:42.728Z [BRIDGE-SERVER] [INFO] Calling Gemini API { model: 'gemini-2.5-pro' }
[GeminiApiClient] [请求时序7] 使用轮换API Key创建ContentGenerator
[GeminiApiClient] [DEBUG] 动态配置详情: {
  model: 'gemini-2.5-pro',
  hasApiKey: true,
  apiKeyPrefix: 'AIzaSyAN8B...',
  authType: 'gemini-api-key'
}
2025-07-25T05:01:47.014Z [BRIDGE-SERVER] [INFO] OpenAI bridge request finished {
  requestId: '12a73f43-0155-4c43-8652-0d2896ec8ae2',
  status: 'success',
  durationMs: 10420
}
[rotation/RotationService] 报告API Key使用结果: key=AIzaSyAN8B..., success=true, errorType=undefined
[rotation/ApiKeyRotationManager] 报告API Key使用结果: key=AIzaSyAN8B..., success=true, errorType=undefined
[rotation/ApiKeyRotationManager] Key 1 使用成功，更新统计信息
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 11,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 11,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
[rotation/ApiKeyRotationManager] Key 1 使用报告处理完成
[rotation/RotationService] API Key使用报告成功提交
2025-07-25T05:01:59.882Z [BRIDGE-SERVER] [INFO] OpenAI bridge request received {
  requestId: '19b0941b-5ed5-4f98-bf5c-ad4d2db7c69d',
  model: 'gemini-2.5-pro',
  stream: true
}
[GeminiApiClient] [客户端时序1] 开始初始化API Key轮换服务
[GeminiApiClient] [客户端时序2] 创建RotationService实例
[GeminiApiClient] [客户端时序3] 调用RotationService.initialize()
[rotation/RotationService] [时序1] 开始初始化轮换服务
[rotation/RotationService] [时序2] 检查多账号模式配置
[DEBUG] /rotation/ConfigLoader.ts - isMultiAccountEnabled: 检查多账号模式 {
  enabled: true,
  hasMultiAccounts: true,
  hasIndividualKeys: false,
  result: true
}
[rotation/RotationService] [时序3] 多账号模式检查结果: true
[rotation/RotationService] [时序5] 开始加载轮换配置
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 开始加载轮换配置
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 开始加载多账号配置
[DEBUG] /rotation/ConfigLoader.ts - isMultiAccountEnabled: 检查多账号模式 {
  enabled: true,
  hasMultiAccounts: true,
  hasIndividualKeys: false,
  result: true
}
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 检查GEMINI_MULTI_ACCOUNTS环境变量 { hasJson: true }
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 解析GEMINI_MULTI_ACCOUNTS JSON
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: JSON配置验证成功 { accountCount: 3 }
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 多账号配置加载完成 { hasMultiAccount: true, accountCount: 3 }
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 轮换配置构建完成 {
  strategy: 'round-robin',
  accountCount: 3,
  enableFallback: true,
  maxRequestsPerKey: undefined,
  rotationInterval: undefined
}
[rotation/RotationService] [时序6] 配置加载完成，账号数量: 3
[rotation/RotationService] [时序8] 开始初始化轮换管理器
[rotation/ApiKeyRotationManager] 开始初始化轮换管理器
[rotation/ApiKeyRotationManager] 加载持久化数据
[DEBUG] /rotation/PersistenceService.ts - loadData: 开始加载持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json'
}
[GeminiApiClient] [请求时序1] 收到sendMessageStream请求
[GeminiApiClient] [请求时序2] 检测到初始化正在进行，等待完成...
[DEBUG] /rotation/PersistenceService.ts - loadData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - loadData: 读取持久化文件内容
[DEBUG] /rotation/PersistenceService.ts - loadData: 持久化数据解析成功 { currentIndex: 0, totalRequests: 11, keysCount: 3 }
[DEBUG] /rotation/PersistenceService.ts - loadData: 释放文件锁
[rotation/ApiKeyRotationManager] 持久化数据加载结果: 成功
[rotation/ApiKeyRotationManager] 初始化API Keys
[rotation/ApiKeyRotationManager] 开始初始化API Keys
[rotation/ApiKeyRotationManager] 使用多账号配置，账号数量: 3
[rotation/ApiKeyRotationManager] 初始化第1个API Key: AIzaSyAN8B...
[rotation/ApiKeyRotationManager] 初始化第2个API Key: AIzaSyAGqu...
[rotation/ApiKeyRotationManager] 初始化第3个API Key: AIzaSyBIy5...
2025-07-25T05:01:59.896Z [BRIDGE-SERVER] [INFO] Initialized 3 API keys
[rotation/ApiKeyRotationManager] API Keys初始化完成，共3个Key
[rotation/ApiKeyRotationManager] 恢复之前保存的状态
2025-07-25T05:01:59.896Z [BRIDGE-SERVER] [INFO] Restored API key rotation state from persistence
[rotation/ApiKeyRotationManager] 验证API Keys
[rotation/ApiKeyRotationManager] 初始化完成后保存初始状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 11,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 11,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
2025-07-25T05:01:59.897Z [BRIDGE-SERVER] [INFO] API Key rotation initialized with 3 keys
[rotation/ApiKeyRotationManager] 轮换管理器初始化完成，共3个API Key
[rotation/RotationService] [时序9] 轮换管理器初始化完成，设置服务为启用状态
2025-07-25T05:01:59.897Z [BRIDGE-SERVER] [INFO] API Key rotation service initialized successfully
[rotation/RotationService] [时序10] API Key轮换服务初始化成功
[GeminiApiClient] [客户端时序4] API Key轮换服务初始化成功
[GeminiApiClient] [客户端时序5] 初始化流程完成
[GeminiApiClient] [回退时序1] 开始初始化回退管理器
[DEBUG] /rotation/ConfigLoader.ts - loadFallbackConfig: 开始加载回退模型配置
[DEBUG] /rotation/ConfigLoader.ts - loadFallbackConfig: 回退模型配置加载完成 {
  enabled: true,
  primaryModel: 'gemini-2.5-pro',
  fallbackModel: 'gemini-2.5-flash',
  maxRetries: 3
}
[fallback/FallbackManager] 回退管理器初始化
[fallback/FallbackManager] 配置: {
  enabled: true,
  primaryModel: 'gemini-2.5-pro',
  fallbackModel: 'gemini-2.5-flash'
}
[fallback/SqliteFallbackPersistence] 初始化SQLite持久化服务，数据库路径: /Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/.gemini/fallback-state.db
[fallback/SqliteFallbackPersistence] 初始化SQLite数据库连接
[fallback/SqliteFallbackPersistence] SQLite数据库初始化完成
2025-07-25T05:01:59.897Z [BRIDGE-SERVER] [INFO] SQLite fallback persistence database initialized successfully
[fallback/FallbackService] 使用SQLite持久化，数据库路径: .gemini/fallback-state.db
[fallback/FallbackService] 回退服务初始化完成
[fallback/FallbackService] 主模型: gemini-2.5-pro
[fallback/FallbackService] 回退模型: gemini-2.5-flash
[fallback/FallbackService] 启用状态: true
[fallback/SqliteFallbackPersistence] 开始加载回退状态
[fallback/SqliteFallbackPersistence] 数据库中无回退状态记录，返回null
[fallback/FallbackManager] 回退服务初始化成功
2025-07-25T05:01:59.898Z [BRIDGE-SERVER] [INFO] Fallback service initialized successfully
[GeminiApiClient] [回退时序2] 回退管理器初始化成功
2025-07-25T05:01:59.898Z [BRIDGE-SERVER] [INFO] Fallback manager initialized successfully
[GeminiApiClient] [回退时序3] 回退管理器初始化流程结束
[fallback/FallbackService] 未找到持久化状态，使用默认状态
[GeminiApiClient] [请求时序3] 初始化等待完成
[GeminiApiClient] [请求时序4] 开始获取轮换API Key
[rotation/RotationService] [API请求] 请求获取API Key，当前状态: enabled=true, manager=true, initializing=false
[rotation/RotationService] [API请求] 从轮换管理器获取下一个API Key
[rotation/ApiKeyRotationManager] 请求获取下一个API Key，当前索引: 0
[rotation/ApiKeyRotationManager] 开始轮换查找，最大尝试次数: 3
[rotation/ApiKeyRotationManager] 尝试第1次，检查索引0的Key状态: active
[rotation/ApiKeyRotationManager] Key 1/3 可用，开始使用
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 12,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 12,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
[rotation/ApiKeyRotationManager] 成功获取API Key: AIzaSyAN8B...
[rotation/RotationService] [API请求] 成功获取轮换API Key: AIzaSyAN8B...
[GeminiApiClient] [请求时序5] 成功获取轮换API Key
[GeminiApiClient] [请求时序6] 开始执行实际请求
[GeminiApiClient] [回退时序4] 当前使用模型: gemini-2.5-pro
2025-07-25T05:01:59.899Z [BRIDGE-SERVER] [INFO] Calling Gemini API { model: 'gemini-2.5-pro' }
[GeminiApiClient] [请求时序7] 使用轮换API Key创建ContentGenerator
[GeminiApiClient] [DEBUG] 动态配置详情: {
  model: 'gemini-2.5-pro',
  hasApiKey: true,
  apiKeyPrefix: 'AIzaSyAN8B...',
  authType: 'gemini-api-key'
}
2025-07-25T05:02:04.465Z [BRIDGE-SERVER] [INFO] OpenAI bridge request finished {
  requestId: 'b660e6b4-3722-44cd-8941-38ba5e889b85',
  status: 'success',
  durationMs: 21748
}
[rotation/RotationService] 报告API Key使用结果: key=AIzaSyAN8B..., success=true, errorType=undefined
[rotation/ApiKeyRotationManager] 报告API Key使用结果: key=AIzaSyAN8B..., success=true, errorType=undefined
[rotation/ApiKeyRotationManager] Key 1 使用成功，更新统计信息
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 12,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 12,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
[rotation/ApiKeyRotationManager] Key 1 使用报告处理完成
[rotation/RotationService] API Key使用报告成功提交
2025-07-25T05:02:39.489Z [BRIDGE-SERVER] [INFO] OpenAI bridge request finished {
  requestId: '19b0941b-5ed5-4f98-bf5c-ad4d2db7c69d',
  status: 'success',
  durationMs: 39607
}
2025-07-25T05:02:42.375Z [BRIDGE-SERVER] [INFO] OpenAI bridge request received {
  requestId: 'd21d32ca-2f4f-4b01-a994-7f4bf482abfc',
  model: 'gemini-2.5-pro',
  stream: true
}
[GeminiApiClient] [客户端时序1] 开始初始化API Key轮换服务
[GeminiApiClient] [客户端时序2] 创建RotationService实例
[GeminiApiClient] [客户端时序3] 调用RotationService.initialize()
[rotation/RotationService] [时序1] 开始初始化轮换服务
[rotation/RotationService] [时序2] 检查多账号模式配置
[DEBUG] /rotation/ConfigLoader.ts - isMultiAccountEnabled: 检查多账号模式 {
  enabled: true,
  hasMultiAccounts: true,
  hasIndividualKeys: false,
  result: true
}
[rotation/RotationService] [时序3] 多账号模式检查结果: true
[rotation/RotationService] [时序5] 开始加载轮换配置
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 开始加载轮换配置
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 开始加载多账号配置
[DEBUG] /rotation/ConfigLoader.ts - isMultiAccountEnabled: 检查多账号模式 {
  enabled: true,
  hasMultiAccounts: true,
  hasIndividualKeys: false,
  result: true
}
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 检查GEMINI_MULTI_ACCOUNTS环境变量 { hasJson: true }
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 解析GEMINI_MULTI_ACCOUNTS JSON
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: JSON配置验证成功 { accountCount: 3 }
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 多账号配置加载完成 { hasMultiAccount: true, accountCount: 3 }
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 轮换配置构建完成 {
  strategy: 'round-robin',
  accountCount: 3,
  enableFallback: true,
  maxRequestsPerKey: undefined,
  rotationInterval: undefined
}
[rotation/RotationService] [时序6] 配置加载完成，账号数量: 3
[rotation/RotationService] [时序8] 开始初始化轮换管理器
[rotation/ApiKeyRotationManager] 开始初始化轮换管理器
[rotation/ApiKeyRotationManager] 加载持久化数据
[DEBUG] /rotation/PersistenceService.ts - loadData: 开始加载持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json'
}
[GeminiApiClient] [请求时序1] 收到sendMessageStream请求
[GeminiApiClient] [请求时序2] 检测到初始化正在进行，等待完成...
[DEBUG] /rotation/PersistenceService.ts - loadData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - loadData: 读取持久化文件内容
[DEBUG] /rotation/PersistenceService.ts - loadData: 持久化数据解析成功 { currentIndex: 0, totalRequests: 12, keysCount: 3 }
[DEBUG] /rotation/PersistenceService.ts - loadData: 释放文件锁
[rotation/ApiKeyRotationManager] 持久化数据加载结果: 成功
[rotation/ApiKeyRotationManager] 初始化API Keys
[rotation/ApiKeyRotationManager] 开始初始化API Keys
[rotation/ApiKeyRotationManager] 使用多账号配置，账号数量: 3
[rotation/ApiKeyRotationManager] 初始化第1个API Key: AIzaSyAN8B...
[rotation/ApiKeyRotationManager] 初始化第2个API Key: AIzaSyAGqu...
[rotation/ApiKeyRotationManager] 初始化第3个API Key: AIzaSyBIy5...
2025-07-25T05:02:42.378Z [BRIDGE-SERVER] [INFO] Initialized 3 API keys
[rotation/ApiKeyRotationManager] API Keys初始化完成，共3个Key
[rotation/ApiKeyRotationManager] 恢复之前保存的状态
2025-07-25T05:02:42.378Z [BRIDGE-SERVER] [INFO] Restored API key rotation state from persistence
[rotation/ApiKeyRotationManager] 验证API Keys
[rotation/ApiKeyRotationManager] 初始化完成后保存初始状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 12,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 12,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
2025-07-25T05:02:42.379Z [BRIDGE-SERVER] [INFO] API Key rotation initialized with 3 keys
[rotation/ApiKeyRotationManager] 轮换管理器初始化完成，共3个API Key
[rotation/RotationService] [时序9] 轮换管理器初始化完成，设置服务为启用状态
2025-07-25T05:02:42.379Z [BRIDGE-SERVER] [INFO] API Key rotation service initialized successfully
[rotation/RotationService] [时序10] API Key轮换服务初始化成功
[GeminiApiClient] [客户端时序4] API Key轮换服务初始化成功
[GeminiApiClient] [客户端时序5] 初始化流程完成
[GeminiApiClient] [回退时序1] 开始初始化回退管理器
[DEBUG] /rotation/ConfigLoader.ts - loadFallbackConfig: 开始加载回退模型配置
[DEBUG] /rotation/ConfigLoader.ts - loadFallbackConfig: 回退模型配置加载完成 {
  enabled: true,
  primaryModel: 'gemini-2.5-pro',
  fallbackModel: 'gemini-2.5-flash',
  maxRetries: 3
}
[fallback/FallbackManager] 回退管理器初始化
[fallback/FallbackManager] 配置: {
  enabled: true,
  primaryModel: 'gemini-2.5-pro',
  fallbackModel: 'gemini-2.5-flash'
}
[fallback/SqliteFallbackPersistence] 初始化SQLite持久化服务，数据库路径: /Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/.gemini/fallback-state.db
[fallback/SqliteFallbackPersistence] 初始化SQLite数据库连接
[fallback/SqliteFallbackPersistence] SQLite数据库初始化完成
2025-07-25T05:02:42.379Z [BRIDGE-SERVER] [INFO] SQLite fallback persistence database initialized successfully
[fallback/FallbackService] 使用SQLite持久化，数据库路径: .gemini/fallback-state.db
[fallback/FallbackService] 回退服务初始化完成
[fallback/FallbackService] 主模型: gemini-2.5-pro
[fallback/FallbackService] 回退模型: gemini-2.5-flash
[fallback/FallbackService] 启用状态: true
[fallback/SqliteFallbackPersistence] 开始加载回退状态
[fallback/SqliteFallbackPersistence] 数据库中无回退状态记录，返回null
[fallback/FallbackManager] 回退服务初始化成功
2025-07-25T05:02:42.381Z [BRIDGE-SERVER] [INFO] Fallback service initialized successfully
[GeminiApiClient] [回退时序2] 回退管理器初始化成功
2025-07-25T05:02:42.382Z [BRIDGE-SERVER] [INFO] Fallback manager initialized successfully
[GeminiApiClient] [回退时序3] 回退管理器初始化流程结束
[fallback/FallbackService] 未找到持久化状态，使用默认状态
[GeminiApiClient] [请求时序3] 初始化等待完成
[GeminiApiClient] [请求时序4] 开始获取轮换API Key
[rotation/RotationService] [API请求] 请求获取API Key，当前状态: enabled=true, manager=true, initializing=false
[rotation/RotationService] [API请求] 从轮换管理器获取下一个API Key
[rotation/ApiKeyRotationManager] 请求获取下一个API Key，当前索引: 0
[rotation/ApiKeyRotationManager] 开始轮换查找，最大尝试次数: 3
[rotation/ApiKeyRotationManager] 尝试第1次，检查索引0的Key状态: active
[rotation/ApiKeyRotationManager] Key 1/3 可用，开始使用
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 13,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 13,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
[rotation/ApiKeyRotationManager] 成功获取API Key: AIzaSyAN8B...
[rotation/RotationService] [API请求] 成功获取轮换API Key: AIzaSyAN8B...
[GeminiApiClient] [请求时序5] 成功获取轮换API Key
[GeminiApiClient] [请求时序6] 开始执行实际请求
[GeminiApiClient] [回退时序4] 当前使用模型: gemini-2.5-pro
2025-07-25T05:02:42.386Z [BRIDGE-SERVER] [INFO] Calling Gemini API { model: 'gemini-2.5-pro' }
[GeminiApiClient] [请求时序7] 使用轮换API Key创建ContentGenerator
[GeminiApiClient] [DEBUG] 动态配置详情: {
  model: 'gemini-2.5-pro',
  hasApiKey: true,
  apiKeyPrefix: 'AIzaSyAN8B...',
  authType: 'gemini-api-key'
}
[rotation/RotationService] 报告API Key使用结果: key=AIzaSyAN8B..., success=true, errorType=undefined
[rotation/ApiKeyRotationManager] 报告API Key使用结果: key=AIzaSyAN8B..., success=true, errorType=undefined
[rotation/ApiKeyRotationManager] Key 1 使用成功，更新统计信息
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 13,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 13,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
[rotation/ApiKeyRotationManager] Key 1 使用报告处理完成
[rotation/RotationService] API Key使用报告成功提交
2025-07-25T05:02:51.277Z [BRIDGE-SERVER] [INFO] OpenAI bridge request received {
  requestId: '9fdc0cef-d0d1-4642-97c6-153a85968774',
  model: 'gemini-2.5-pro',
  stream: true
}
[GeminiApiClient] [客户端时序1] 开始初始化API Key轮换服务
[GeminiApiClient] [客户端时序2] 创建RotationService实例
[GeminiApiClient] [客户端时序3] 调用RotationService.initialize()
[rotation/RotationService] [时序1] 开始初始化轮换服务
[rotation/RotationService] [时序2] 检查多账号模式配置
[DEBUG] /rotation/ConfigLoader.ts - isMultiAccountEnabled: 检查多账号模式 {
  enabled: true,
  hasMultiAccounts: true,
  hasIndividualKeys: false,
  result: true
}
[rotation/RotationService] [时序3] 多账号模式检查结果: true
[rotation/RotationService] [时序5] 开始加载轮换配置
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 开始加载轮换配置
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 开始加载多账号配置
[DEBUG] /rotation/ConfigLoader.ts - isMultiAccountEnabled: 检查多账号模式 {
  enabled: true,
  hasMultiAccounts: true,
  hasIndividualKeys: false,
  result: true
}
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 检查GEMINI_MULTI_ACCOUNTS环境变量 { hasJson: true }
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: 解析GEMINI_MULTI_ACCOUNTS JSON
[DEBUG] /rotation/ConfigLoader.ts - loadMultiAccountConfig: JSON配置验证成功 { accountCount: 3 }
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 多账号配置加载完成 { hasMultiAccount: true, accountCount: 3 }
[DEBUG] /rotation/ConfigLoader.ts - loadRotationConfig: 轮换配置构建完成 {
  strategy: 'round-robin',
  accountCount: 3,
  enableFallback: true,
  maxRequestsPerKey: undefined,
  rotationInterval: undefined
}
[rotation/RotationService] [时序6] 配置加载完成，账号数量: 3
[rotation/RotationService] [时序8] 开始初始化轮换管理器
[rotation/ApiKeyRotationManager] 开始初始化轮换管理器
[rotation/ApiKeyRotationManager] 加载持久化数据
[DEBUG] /rotation/PersistenceService.ts - loadData: 开始加载持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json'
}
[GeminiApiClient] [请求时序1] 收到sendMessageStream请求
[GeminiApiClient] [请求时序2] 检测到初始化正在进行，等待完成...
[DEBUG] /rotation/PersistenceService.ts - loadData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - loadData: 读取持久化文件内容
[DEBUG] /rotation/PersistenceService.ts - loadData: 持久化数据解析成功 { currentIndex: 0, totalRequests: 13, keysCount: 3 }
[DEBUG] /rotation/PersistenceService.ts - loadData: 释放文件锁
[rotation/ApiKeyRotationManager] 持久化数据加载结果: 成功
[rotation/ApiKeyRotationManager] 初始化API Keys
[rotation/ApiKeyRotationManager] 开始初始化API Keys
[rotation/ApiKeyRotationManager] 使用多账号配置，账号数量: 3
[rotation/ApiKeyRotationManager] 初始化第1个API Key: AIzaSyAN8B...
[rotation/ApiKeyRotationManager] 初始化第2个API Key: AIzaSyAGqu...
[rotation/ApiKeyRotationManager] 初始化第3个API Key: AIzaSyBIy5...
2025-07-25T05:02:51.282Z [BRIDGE-SERVER] [INFO] Initialized 3 API keys
[rotation/ApiKeyRotationManager] API Keys初始化完成，共3个Key
[rotation/ApiKeyRotationManager] 恢复之前保存的状态
2025-07-25T05:02:51.282Z [BRIDGE-SERVER] [INFO] Restored API key rotation state from persistence
[rotation/ApiKeyRotationManager] 验证API Keys
[rotation/ApiKeyRotationManager] 初始化完成后保存初始状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 13,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 13,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
2025-07-25T05:02:51.285Z [BRIDGE-SERVER] [INFO] API Key rotation initialized with 3 keys
[rotation/ApiKeyRotationManager] 轮换管理器初始化完成，共3个API Key
[rotation/RotationService] [时序9] 轮换管理器初始化完成，设置服务为启用状态
2025-07-25T05:02:51.285Z [BRIDGE-SERVER] [INFO] API Key rotation service initialized successfully
[rotation/RotationService] [时序10] API Key轮换服务初始化成功
[GeminiApiClient] [客户端时序4] API Key轮换服务初始化成功
[GeminiApiClient] [客户端时序5] 初始化流程完成
[GeminiApiClient] [回退时序1] 开始初始化回退管理器
[DEBUG] /rotation/ConfigLoader.ts - loadFallbackConfig: 开始加载回退模型配置
[DEBUG] /rotation/ConfigLoader.ts - loadFallbackConfig: 回退模型配置加载完成 {
  enabled: true,
  primaryModel: 'gemini-2.5-pro',
  fallbackModel: 'gemini-2.5-flash',
  maxRetries: 3
}
[fallback/FallbackManager] 回退管理器初始化
[fallback/FallbackManager] 配置: {
  enabled: true,
  primaryModel: 'gemini-2.5-pro',
  fallbackModel: 'gemini-2.5-flash'
}
[fallback/SqliteFallbackPersistence] 初始化SQLite持久化服务，数据库路径: /Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/.gemini/fallback-state.db
[fallback/SqliteFallbackPersistence] 初始化SQLite数据库连接
[fallback/SqliteFallbackPersistence] SQLite数据库初始化完成
2025-07-25T05:02:51.287Z [BRIDGE-SERVER] [INFO] SQLite fallback persistence database initialized successfully
[fallback/FallbackService] 使用SQLite持久化，数据库路径: .gemini/fallback-state.db
[fallback/FallbackService] 回退服务初始化完成
[fallback/FallbackService] 主模型: gemini-2.5-pro
[fallback/FallbackService] 回退模型: gemini-2.5-flash
[fallback/FallbackService] 启用状态: true
[fallback/SqliteFallbackPersistence] 开始加载回退状态
[fallback/SqliteFallbackPersistence] 数据库中无回退状态记录，返回null
[fallback/FallbackManager] 回退服务初始化成功
2025-07-25T05:02:51.287Z [BRIDGE-SERVER] [INFO] Fallback service initialized successfully
[GeminiApiClient] [回退时序2] 回退管理器初始化成功
2025-07-25T05:02:51.287Z [BRIDGE-SERVER] [INFO] Fallback manager initialized successfully
[GeminiApiClient] [回退时序3] 回退管理器初始化流程结束
[fallback/FallbackService] 未找到持久化状态，使用默认状态
[GeminiApiClient] [请求时序3] 初始化等待完成
[GeminiApiClient] [请求时序4] 开始获取轮换API Key
[rotation/RotationService] [API请求] 请求获取API Key，当前状态: enabled=true, manager=true, initializing=false
[rotation/RotationService] [API请求] 从轮换管理器获取下一个API Key
[rotation/ApiKeyRotationManager] 请求获取下一个API Key，当前索引: 0
[rotation/ApiKeyRotationManager] 开始轮换查找，最大尝试次数: 3
[rotation/ApiKeyRotationManager] 尝试第1次，检查索引0的Key状态: active
[rotation/ApiKeyRotationManager] Key 1/3 可用，开始使用
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 14,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 14,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
[rotation/ApiKeyRotationManager] 成功获取API Key: AIzaSyAN8B...
[rotation/RotationService] [API请求] 成功获取轮换API Key: AIzaSyAN8B...
[GeminiApiClient] [请求时序5] 成功获取轮换API Key
[GeminiApiClient] [请求时序6] 开始执行实际请求
[GeminiApiClient] [回退时序4] 当前使用模型: gemini-2.5-pro
2025-07-25T05:02:51.290Z [BRIDGE-SERVER] [INFO] Calling Gemini API { model: 'gemini-2.5-pro' }
[GeminiApiClient] [请求时序7] 使用轮换API Key创建ContentGenerator
[GeminiApiClient] [DEBUG] 动态配置详情: {
  model: 'gemini-2.5-pro',
  hasApiKey: true,
  apiKeyPrefix: 'AIzaSyAN8B...',
  authType: 'gemini-api-key'
}
2025-07-25T05:02:54.584Z [BRIDGE-SERVER] [INFO] OpenAI bridge request finished {
  requestId: 'd21d32ca-2f4f-4b01-a994-7f4bf482abfc',
  status: 'success',
  durationMs: 12209
}
[rotation/RotationService] 报告API Key使用结果: key=AIzaSyAN8B..., success=true, errorType=undefined
[rotation/ApiKeyRotationManager] 报告API Key使用结果: key=AIzaSyAN8B..., success=true, errorType=undefined
[rotation/ApiKeyRotationManager] Key 1 使用成功，更新统计信息
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 开始保存轮换状态
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 准备保存的数据 {
  currentIndex: 0,
  totalRequests: 14,
  keysCount: 3,
  persistenceFile: './data/rotation-state.json'
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 开始保存持久化数据 {
  filePath: '/Users/sss/devprog/item_intre/gemini-cli-mcp-openai-bridge/gemini-cli/packages/bridge-server/data/rotation-state.json',
  currentIndex: 0,
  totalRequests: 14,
  keysCount: 3
}
[DEBUG] /rotation/PersistenceService.ts - saveData: 获取文件锁成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 持久化数据写入文件成功
[DEBUG] /rotation/PersistenceService.ts - saveData: 释放文件锁
[DEBUG] /rotation/ApiKeyRotationManager.ts - saveState: 轮换状态保存成功
[rotation/ApiKeyRotationManager] Key 1 使用报告处理完成
[rotation/RotationService] API Key使用报告成功提交
2025-07-25T05:03:03.933Z [BRIDGE-SERVER] [INFO] OpenAI bridge request finished {
  requestId: '9fdc0cef-d0d1-4642-97c6-153a85968774',
  status: 'success',
  durationMs: 12656
}
